<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.08%)</title><rect x="201.9" y="1925" width="0.9" height="15.0" fill="rgb(219,125,50)" rx="2" ry="2" />
<text  x="204.90" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="437" width="0.2" height="15.0" fill="rgb(216,39,28)" rx="2" ry="2" />
<text  x="1183.05" y="447.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (36 samples, 0.26%)</title><rect x="678.7" y="2037" width="3.2" height="15.0" fill="rgb(237,116,25)" rx="2" ry="2" />
<text  x="681.74" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (20 samples, 0.15%)</title><rect x="210.5" y="1941" width="1.7" height="15.0" fill="rgb(213,229,26)" rx="2" ry="2" />
<text  x="213.46" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="917" width="0.1" height="15.0" fill="rgb(253,71,6)" rx="2" ry="2" />
<text  x="221.67" y="927.5" ></text>
</g>
<g >
<title>c10::TensorImpl::requires_grad (2 samples, 0.01%)</title><rect x="485.0" y="1893" width="0.2" height="15.0" fill="rgb(250,132,14)" rx="2" ry="2" />
<text  x="488.03" y="1903.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::finalize_tokens (13 samples, 0.10%)</title><rect x="1016.7" y="2053" width="1.1" height="15.0" fill="rgb(216,147,10)" rx="2" ry="2" />
<text  x="1019.70" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="469.2" y="1477" width="0.3" height="15.0" fill="rgb(247,151,4)" rx="2" ry="2" />
<text  x="472.20" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="469.0" y="1637" width="0.5" height="15.0" fill="rgb(224,106,31)" rx="2" ry="2" />
<text  x="472.03" y="1647.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (5 samples, 0.04%)</title><rect x="1185.6" y="1925" width="0.4" height="15.0" fill="rgb(220,118,18)" rx="2" ry="2" />
<text  x="1188.59" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (17 samples, 0.12%)</title><rect x="767.2" y="2053" width="1.5" height="15.0" fill="rgb(214,11,8)" rx="2" ry="2" />
<text  x="770.21" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="789" width="5.5" height="15.0" fill="rgb(253,182,3)" rx="2" ry="2" />
<text  x="67.31" y="799.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (3 samples, 0.02%)</title><rect x="464.9" y="1925" width="0.2" height="15.0" fill="rgb(247,191,22)" rx="2" ry="2" />
<text  x="467.88" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1461" width="0.5" height="15.0" fill="rgb(221,88,13)" rx="2" ry="2" />
<text  x="472.55" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="549" width="0.1" height="15.0" fill="rgb(235,98,34)" rx="2" ry="2" />
<text  x="1183.57" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1413" width="0.3" height="15.0" fill="rgb(208,67,46)" rx="2" ry="2" />
<text  x="1182.97" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1141" width="0.3" height="15.0" fill="rgb(215,71,46)" rx="2" ry="2" />
<text  x="472.55" y="1151.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="641.3" y="2021" width="0.2" height="15.0" fill="rgb(215,170,9)" rx="2" ry="2" />
<text  x="644.29" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1381" width="0.3" height="15.0" fill="rgb(218,120,48)" rx="2" ry="2" />
<text  x="1182.97" y="1391.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (9 samples, 0.07%)</title><rect x="209.0" y="1941" width="0.8" height="15.0" fill="rgb(246,15,54)" rx="2" ry="2" />
<text  x="211.99" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="533" width="0.2" height="15.0" fill="rgb(239,188,47)" rx="2" ry="2" />
<text  x="472.63" y="543.5" ></text>
</g>
<g >
<title>THFloatTensor_setStorage (2 samples, 0.01%)</title><rect x="489.2" y="1781" width="0.2" height="15.0" fill="rgb(238,205,38)" rx="2" ry="2" />
<text  x="492.18" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.8" y="1285" width="0.2" height="15.0" fill="rgb(237,27,26)" rx="2" ry="2" />
<text  x="472.81" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1909" width="5.6" height="15.0" fill="rgb(229,79,40)" rx="2" ry="2" />
<text  x="67.31" y="1919.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (25 samples, 0.18%)</title><rect x="196.6" y="1909" width="2.2" height="15.0" fill="rgb(215,78,36)" rx="2" ry="2" />
<text  x="199.62" y="1919.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="692.7" y="2021" width="0.2" height="15.0" fill="rgb(238,198,25)" rx="2" ry="2" />
<text  x="695.66" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1509" width="5.5" height="15.0" fill="rgb(233,226,38)" rx="2" ry="2" />
<text  x="67.31" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="821" width="0.2" height="15.0" fill="rgb(232,63,6)" rx="2" ry="2" />
<text  x="1183.05" y="831.5" ></text>
</g>
<g >
<title>__kmp_yield (2 samples, 0.01%)</title><rect x="751.4" y="2053" width="0.2" height="15.0" fill="rgb(245,43,37)" rx="2" ry="2" />
<text  x="754.38" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="261" width="0.2" height="15.0" fill="rgb(253,190,46)" rx="2" ry="2" />
<text  x="1183.05" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1797" width="0.3" height="15.0" fill="rgb(231,107,36)" rx="2" ry="2" />
<text  x="1182.97" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1397" width="0.3" height="15.0" fill="rgb(239,163,18)" rx="2" ry="2" />
<text  x="1182.97" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1557" width="0.3" height="15.0" fill="rgb(239,25,0)" rx="2" ry="2" />
<text  x="221.59" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1461" width="0.3" height="15.0" fill="rgb(247,36,44)" rx="2" ry="2" />
<text  x="1182.97" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="218.7" y="1173" width="0.2" height="15.0" fill="rgb(233,220,24)" rx="2" ry="2" />
<text  x="221.67" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (114 samples, 0.84%)</title><rect x="61.1" y="2005" width="9.9" height="15.0" fill="rgb(228,36,37)" rx="2" ry="2" />
<text  x="64.11" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="648.6" y="2021" width="0.2" height="15.0" fill="rgb(237,90,43)" rx="2" ry="2" />
<text  x="651.64" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1173" width="5.5" height="15.0" fill="rgb(236,90,31)" rx="2" ry="2" />
<text  x="67.31" y="1183.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (23 samples, 0.17%)</title><rect x="459.3" y="1925" width="1.9" height="15.0" fill="rgb(240,163,25)" rx="2" ry="2" />
<text  x="462.26" y="1935.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="813.0" y="2037" width="0.2" height="15.0" fill="rgb(229,38,47)" rx="2" ry="2" />
<text  x="816.04" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="261" width="0.1" height="15.0" fill="rgb(225,59,44)" rx="2" ry="2" />
<text  x="1183.57" y="271.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1525" width="5.5" height="15.0" fill="rgb(248,102,6)" rx="2" ry="2" />
<text  x="67.31" y="1535.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (3 samples, 0.02%)</title><rect x="186.2" y="1925" width="0.2" height="15.0" fill="rgb(246,126,22)" rx="2" ry="2" />
<text  x="189.16" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, nlohmann::detail::json_ref&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, nlohmann::detail::json_ref&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*&gt; (3 samples, 0.02%)</title><rect x="458.4" y="1989" width="0.3" height="15.0" fill="rgb(228,182,36)" rx="2" ry="2" />
<text  x="461.39" y="1999.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (5 samples, 0.04%)</title><rect x="464.2" y="2005" width="0.4" height="15.0" fill="rgb(221,101,37)" rx="2" ry="2" />
<text  x="467.19" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1749" width="5.6" height="15.0" fill="rgb(218,184,53)" rx="2" ry="2" />
<text  x="67.31" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt;::_M_realloc_insert&lt;TDbDocument const&amp;&gt; (2 samples, 0.01%)</title><rect x="219.5" y="1957" width="0.2" height="15.0" fill="rgb(219,210,2)" rx="2" ry="2" />
<text  x="222.54" y="1967.5" ></text>
</g>
<g >
<title>__dynamic_cast (6 samples, 0.04%)</title><rect x="493.5" y="1941" width="0.5" height="15.0" fill="rgb(252,84,36)" rx="2" ry="2" />
<text  x="496.50" y="1951.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (18 samples, 0.13%)</title><rect x="72.5" y="2005" width="1.6" height="15.0" fill="rgb(251,54,39)" rx="2" ry="2" />
<text  x="75.52" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="309" width="0.2" height="15.0" fill="rgb(205,29,7)" rx="2" ry="2" />
<text  x="1183.05" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1333" width="0.3" height="15.0" fill="rgb(222,128,43)" rx="2" ry="2" />
<text  x="1182.97" y="1343.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (2 samples, 0.01%)</title><rect x="460.4" y="1909" width="0.2" height="15.0" fill="rgb(216,222,11)" rx="2" ry="2" />
<text  x="463.38" y="1919.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (22 samples, 0.16%)</title><rect x="683.0" y="2037" width="1.9" height="15.0" fill="rgb(251,94,32)" rx="2" ry="2" />
<text  x="685.98" y="2047.5" ></text>
</g>
<g >
<title>std::locale::locale (2 samples, 0.01%)</title><rect x="637.0" y="1941" width="0.1" height="15.0" fill="rgb(242,158,31)" rx="2" ry="2" />
<text  x="639.97" y="1951.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (2 samples, 0.01%)</title><rect x="488.1" y="1925" width="0.2" height="15.0" fill="rgb(207,58,46)" rx="2" ry="2" />
<text  x="491.14" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (37 samples, 0.27%)</title><rect x="64.4" y="69" width="3.2" height="15.0" fill="rgb(237,209,19)" rx="2" ry="2" />
<text  x="67.40" y="79.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.03%)</title><rect x="201.1" y="1925" width="0.4" height="15.0" fill="rgb(225,127,53)" rx="2" ry="2" />
<text  x="204.12" y="1935.5" ></text>
</g>
<g >
<title>at::Tensor::set_ (12 samples, 0.09%)</title><rect x="488.9" y="1893" width="1.1" height="15.0" fill="rgb(217,173,8)" rx="2" ry="2" />
<text  x="491.92" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1589" width="0.3" height="15.0" fill="rgb(225,184,32)" rx="2" ry="2" />
<text  x="221.59" y="1599.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (5 samples, 0.04%)</title><rect x="216.0" y="1925" width="0.4" height="15.0" fill="rgb(237,74,50)" rx="2" ry="2" />
<text  x="218.99" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1685" width="0.5" height="15.0" fill="rgb(216,23,3)" rx="2" ry="2" />
<text  x="472.55" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace_back&lt;at::Tensor const&amp;&gt; (3 samples, 0.02%)</title><rect x="1187.1" y="2053" width="0.3" height="15.0" fill="rgb(242,209,34)" rx="2" ry="2" />
<text  x="1190.15" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="725" width="5.5" height="15.0" fill="rgb(217,190,49)" rx="2" ry="2" />
<text  x="67.31" y="735.5" ></text>
</g>
<g >
<title>at::GradMode::is_enabled (2 samples, 0.01%)</title><rect x="484.4" y="1893" width="0.2" height="15.0" fill="rgb(248,132,47)" rx="2" ry="2" />
<text  x="487.42" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1029" width="0.2" height="15.0" fill="rgb(220,22,17)" rx="2" ry="2" />
<text  x="1183.49" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="245" width="5.5" height="15.0" fill="rgb(210,211,37)" rx="2" ry="2" />
<text  x="67.31" y="255.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::run (43 samples, 0.32%)</title><rect x="1183.4" y="2037" width="3.7" height="15.0" fill="rgb(212,65,17)" rx="2" ry="2" />
<text  x="1186.43" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (3 samples, 0.02%)</title><rect x="464.9" y="1877" width="0.2" height="15.0" fill="rgb(219,219,52)" rx="2" ry="2" />
<text  x="467.88" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14 samples, 0.10%)</title><rect x="468.8" y="1829" width="1.2" height="15.0" fill="rgb(231,141,17)" rx="2" ry="2" />
<text  x="471.77" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="581" width="0.1" height="15.0" fill="rgb(247,59,19)" rx="2" ry="2" />
<text  x="1183.57" y="591.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="437" width="5.5" height="15.0" fill="rgb(220,172,38)" rx="2" ry="2" />
<text  x="67.31" y="447.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_shape (2 samples, 0.01%)</title><rect x="69.2" y="37" width="0.2" height="15.0" fill="rgb(232,30,6)" rx="2" ry="2" />
<text  x="72.24" y="47.5" ></text>
</g>
<g >
<title>TAnnotator::~TAnnotator (5 samples, 0.04%)</title><rect x="199.8" y="2005" width="0.5" height="15.0" fill="rgb(207,194,45)" rx="2" ry="2" />
<text  x="202.82" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="133" width="5.5" height="15.0" fill="rgb(246,1,11)" rx="2" ry="2" />
<text  x="67.31" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="277" width="0.1" height="15.0" fill="rgb(209,161,1)" rx="2" ry="2" />
<text  x="1183.57" y="287.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1157" width="5.5" height="15.0" fill="rgb(243,19,0)" rx="2" ry="2" />
<text  x="67.31" y="1167.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::ScoreUrl (2 samples, 0.01%)</title><rect x="217.2" y="1957" width="0.2" height="15.0" fill="rgb(227,174,6)" rx="2" ry="2" />
<text  x="220.20" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1717" width="0.3" height="15.0" fill="rgb(222,74,13)" rx="2" ry="2" />
<text  x="1182.97" y="1727.5" ></text>
</g>
<g >
<title>THStorage_resize (2 samples, 0.01%)</title><rect x="67.2" y="37" width="0.1" height="15.0" fill="rgb(232,24,38)" rx="2" ry="2" />
<text  x="70.16" y="47.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (15 samples, 0.11%)</title><rect x="486.6" y="1925" width="1.3" height="15.0" fill="rgb(236,12,23)" rx="2" ry="2" />
<text  x="489.58" y="1935.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="216.4" y="1957" width="0.3" height="15.0" fill="rgb(239,182,30)" rx="2" ry="2" />
<text  x="219.42" y="1967.5" ></text>
</g>
<g >
<title>at::CPUType::mm (2 samples, 0.01%)</title><rect x="76.1" y="2021" width="0.1" height="15.0" fill="rgb(206,149,46)" rx="2" ry="2" />
<text  x="79.07" y="2031.5" ></text>
</g>
<g >
<title>DetectLanguage (11 samples, 0.08%)</title><rect x="467.4" y="1957" width="0.9" height="15.0" fill="rgb(239,9,41)" rx="2" ry="2" />
<text  x="470.39" y="1967.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="645.8" y="2005" width="0.2" height="15.0" fill="rgb(243,85,7)" rx="2" ry="2" />
<text  x="648.79" y="2015.5" ></text>
</g>
<g >
<title>memcmp@plt (14 samples, 0.10%)</title><rect x="1012.7" y="2053" width="1.2" height="15.0" fill="rgb(212,205,0)" rx="2" ry="2" />
<text  x="1015.72" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.1" y="69" width="0.2" height="15.0" fill="rgb(207,192,52)" rx="2" ry="2" />
<text  x="1183.14" y="79.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="533" width="5.5" height="15.0" fill="rgb(247,92,7)" rx="2" ry="2" />
<text  x="67.31" y="543.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1541" width="5.5" height="15.0" fill="rgb(214,143,4)" rx="2" ry="2" />
<text  x="67.31" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1173" width="0.3" height="15.0" fill="rgb(225,43,20)" rx="2" ry="2" />
<text  x="1182.97" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1381" width="0.5" height="15.0" fill="rgb(209,154,32)" rx="2" ry="2" />
<text  x="472.55" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16 samples, 0.12%)</title><rect x="468.6" y="1909" width="1.4" height="15.0" fill="rgb(205,209,46)" rx="2" ry="2" />
<text  x="471.60" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1221" width="0.3" height="15.0" fill="rgb(219,9,30)" rx="2" ry="2" />
<text  x="1182.97" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="181" width="5.5" height="15.0" fill="rgb(212,45,52)" rx="2" ry="2" />
<text  x="67.31" y="191.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set_case (2 samples, 0.01%)</title><rect x="678.3" y="2037" width="0.2" height="15.0" fill="rgb(226,182,3)" rx="2" ry="2" />
<text  x="681.31" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.2" y="1333" width="0.2" height="15.0" fill="rgb(208,217,43)" rx="2" ry="2" />
<text  x="472.20" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="821" width="0.2" height="15.0" fill="rgb(232,76,46)" rx="2" ry="2" />
<text  x="472.63" y="831.5" ></text>
</g>
<g >
<title>TDocument::FromJson (7 samples, 0.05%)</title><rect x="183.6" y="1973" width="0.6" height="15.0" fill="rgb(209,203,17)" rx="2" ry="2" />
<text  x="186.56" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1685" width="5.6" height="15.0" fill="rgb(222,158,11)" rx="2" ry="2" />
<text  x="67.31" y="1695.5" ></text>
</g>
<g >
<title>malloc@plt (2 samples, 0.01%)</title><rect x="674.7" y="2037" width="0.1" height="15.0" fill="rgb(216,95,32)" rx="2" ry="2" />
<text  x="677.67" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (3 samples, 0.02%)</title><rect x="464.9" y="1909" width="0.2" height="15.0" fill="rgb(240,148,15)" rx="2" ry="2" />
<text  x="467.88" y="1919.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (10 samples, 0.07%)</title><rect x="650.5" y="2037" width="0.9" height="15.0" fill="rgb(232,128,22)" rx="2" ry="2" />
<text  x="653.55" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1925" width="0.3" height="15.0" fill="rgb(215,220,20)" rx="2" ry="2" />
<text  x="1183.40" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1317" width="0.5" height="15.0" fill="rgb(242,118,33)" rx="2" ry="2" />
<text  x="472.55" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="981" width="0.3" height="15.0" fill="rgb(243,94,44)" rx="2" ry="2" />
<text  x="472.55" y="991.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (33 samples, 0.24%)</title><rect x="458.9" y="1989" width="2.9" height="15.0" fill="rgb(226,142,6)" rx="2" ry="2" />
<text  x="461.91" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1333" width="0.2" height="15.0" fill="rgb(210,173,16)" rx="2" ry="2" />
<text  x="1183.49" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="837" width="0.2" height="15.0" fill="rgb(230,48,42)" rx="2" ry="2" />
<text  x="1183.49" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (20 samples, 0.15%)</title><rect x="730.7" y="2037" width="1.7" height="15.0" fill="rgb(224,140,50)" rx="2" ry="2" />
<text  x="733.71" y="2047.5" ></text>
</g>
<g >
<title>__sched_yield (4 samples, 0.03%)</title><rect x="751.6" y="2053" width="0.3" height="15.0" fill="rgb(212,42,54)" rx="2" ry="2" />
<text  x="754.55" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1285" width="0.3" height="15.0" fill="rgb(218,96,5)" rx="2" ry="2" />
<text  x="1182.97" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1413" width="0.3" height="15.0" fill="rgb(252,122,42)" rx="2" ry="2" />
<text  x="221.59" y="1423.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_addmm_out (4 samples, 0.03%)</title><rect x="67.7" y="53" width="0.3" height="15.0" fill="rgb(212,107,44)" rx="2" ry="2" />
<text  x="70.68" y="63.5" ></text>
</g>
<g >
<title>[unknown] (176 samples, 1.29%)</title><rect x="60.5" y="2021" width="15.2" height="15.0" fill="rgb(208,225,29)" rx="2" ry="2" />
<text  x="63.50" y="2031.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (2,021 samples, 14.81%)</title><rect x="465.6" y="2021" width="174.7" height="15.0" fill="rgb(229,4,49)" rx="2" ry="2" />
<text  x="468.57" y="2031.5" >std::__future_base::_S..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1179.5" y="2005" width="0.2" height="15.0" fill="rgb(248,114,8)" rx="2" ry="2" />
<text  x="1182.54" y="2015.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="638.5" y="1957" width="0.2" height="15.0" fill="rgb(208,222,35)" rx="2" ry="2" />
<text  x="641.53" y="1967.5" ></text>
</g>
<g >
<title>c10::function_ref&lt;void  (7 samples, 0.05%)</title><rect x="755.2" y="2053" width="0.6" height="15.0" fill="rgb(233,131,41)" rx="2" ry="2" />
<text  x="758.19" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1179.7" y="1989" width="0.6" height="15.0" fill="rgb(215,103,4)" rx="2" ry="2" />
<text  x="1182.71" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="677" width="0.1" height="15.0" fill="rgb(226,165,43)" rx="2" ry="2" />
<text  x="1183.57" y="687.5" ></text>
</g>
<g >
<title>memcpy@plt (9 samples, 0.07%)</title><rect x="474.1" y="1925" width="0.8" height="15.0" fill="rgb(209,176,15)" rx="2" ry="2" />
<text  x="477.13" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="743.9" y="2005" width="0.2" height="15.0" fill="rgb(236,69,38)" rx="2" ry="2" />
<text  x="746.94" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1253" width="0.2" height="15.0" fill="rgb(210,159,16)" rx="2" ry="2" />
<text  x="1183.49" y="1263.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="949" width="5.5" height="15.0" fill="rgb(244,95,28)" rx="2" ry="2" />
<text  x="67.31" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="965" width="0.2" height="15.0" fill="rgb(237,165,26)" rx="2" ry="2" />
<text  x="472.63" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1333" width="0.3" height="15.0" fill="rgb(205,196,36)" rx="2" ry="2" />
<text  x="221.59" y="1343.5" ></text>
</g>
<g >
<title>torch::autograd::impl::set_gradient_edge (3 samples, 0.02%)</title><rect x="741.5" y="2005" width="0.3" height="15.0" fill="rgb(210,26,23)" rx="2" ry="2" />
<text  x="744.52" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (8 samples, 0.06%)</title><rect x="74.9" y="2005" width="0.7" height="15.0" fill="rgb(223,6,21)" rx="2" ry="2" />
<text  x="77.86" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="757" width="0.2" height="15.0" fill="rgb(233,122,19)" rx="2" ry="2" />
<text  x="1183.05" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1765" width="0.3" height="15.0" fill="rgb(213,33,39)" rx="2" ry="2" />
<text  x="1183.40" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="693" width="5.5" height="15.0" fill="rgb(242,107,0)" rx="2" ry="2" />
<text  x="67.31" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="469.2" y="1461" width="0.3" height="15.0" fill="rgb(251,96,42)" rx="2" ry="2" />
<text  x="472.20" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="661" width="0.2" height="15.0" fill="rgb(212,71,28)" rx="2" ry="2" />
<text  x="472.63" y="671.5" ></text>
</g>
<g >
<title>boost::algorithm::join&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, char [2]&gt; (77 samples, 0.56%)</title><rect x="472.2" y="1941" width="6.7" height="15.0" fill="rgb(251,115,19)" rx="2" ry="2" />
<text  x="475.23" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1349" width="0.2" height="15.0" fill="rgb(243,207,37)" rx="2" ry="2" />
<text  x="1183.49" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1189" width="0.3" height="15.0" fill="rgb(243,82,15)" rx="2" ry="2" />
<text  x="1182.97" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="597" width="0.2" height="15.0" fill="rgb(241,210,30)" rx="2" ry="2" />
<text  x="1183.05" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (2,020 samples, 14.80%)</title><rect x="465.7" y="2005" width="174.6" height="15.0" fill="rgb(219,216,40)" rx="2" ry="2" />
<text  x="468.66" y="2015.5" >std::_Function_handler..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.2" y="1381" width="0.2" height="15.0" fill="rgb(234,228,33)" rx="2" ry="2" />
<text  x="472.20" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="373" width="0.2" height="15.0" fill="rgb(244,204,2)" rx="2" ry="2" />
<text  x="1183.05" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (18 samples, 0.13%)</title><rect x="203.6" y="1925" width="1.6" height="15.0" fill="rgb(225,75,34)" rx="2" ry="2" />
<text  x="206.63" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="218.7" y="1253" width="0.2" height="15.0" fill="rgb(213,46,45)" rx="2" ry="2" />
<text  x="221.67" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="549" width="0.2" height="15.0" fill="rgb(243,214,18)" rx="2" ry="2" />
<text  x="472.63" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1893" width="0.4" height="15.0" fill="rgb(214,73,27)" rx="2" ry="2" />
<text  x="221.50" y="1903.5" ></text>
</g>
<g >
<title>strlen@plt (16 samples, 0.12%)</title><rect x="1188.1" y="2053" width="1.4" height="15.0" fill="rgb(254,176,12)" rx="2" ry="2" />
<text  x="1191.10" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.8" y="1269" width="0.2" height="15.0" fill="rgb(236,54,25)" rx="2" ry="2" />
<text  x="472.81" y="1279.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="638.3" y="1957" width="0.2" height="15.0" fill="rgb(229,17,41)" rx="2" ry="2" />
<text  x="641.27" y="1967.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (8 samples, 0.06%)</title><rect x="639.0" y="1957" width="0.7" height="15.0" fill="rgb(211,40,52)" rx="2" ry="2" />
<text  x="641.96" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="1077" width="0.1" height="15.0" fill="rgb(215,42,30)" rx="2" ry="2" />
<text  x="221.67" y="1087.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;torch::autograd::generated::SqueezeBackward1*, void  (2 samples, 0.01%)</title><rect x="1151.0" y="2053" width="0.2" height="15.0" fill="rgb(250,38,49)" rx="2" ry="2" />
<text  x="1154.00" y="2063.5" ></text>
</g>
<g >
<title>mkl_serv_cpu_detect (2 samples, 0.01%)</title><rect x="676.8" y="2037" width="0.2" height="15.0" fill="rgb(244,101,19)" rx="2" ry="2" />
<text  x="679.84" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="453" width="0.1" height="15.0" fill="rgb(221,225,28)" rx="2" ry="2" />
<text  x="1183.57" y="463.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="501" width="5.5" height="15.0" fill="rgb(244,87,15)" rx="2" ry="2" />
<text  x="67.31" y="511.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (3 samples, 0.02%)</title><rect x="460.1" y="1893" width="0.3" height="15.0" fill="rgb(226,48,8)" rx="2" ry="2" />
<text  x="463.12" y="1903.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (33 samples, 0.24%)</title><rect x="458.9" y="1973" width="2.9" height="15.0" fill="rgb(207,215,47)" rx="2" ry="2" />
<text  x="461.91" y="1983.5" ></text>
</g>
<g >
<title>torch::autograd::generated::TBackward::~TBackward (7 samples, 0.05%)</title><rect x="742.9" y="2037" width="0.6" height="15.0" fill="rgb(220,221,33)" rx="2" ry="2" />
<text  x="745.91" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="517" width="0.1" height="15.0" fill="rgb(212,18,40)" rx="2" ry="2" />
<text  x="1183.57" y="527.5" ></text>
</g>
<g >
<title>GetHost (7 samples, 0.05%)</title><rect x="218.3" y="1957" width="0.6" height="15.0" fill="rgb(207,54,44)" rx="2" ry="2" />
<text  x="221.33" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1669" width="0.3" height="15.0" fill="rgb(225,146,29)" rx="2" ry="2" />
<text  x="1182.97" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="245" width="0.2" height="15.0" fill="rgb(220,29,29)" rx="2" ry="2" />
<text  x="1183.05" y="255.5" ></text>
</g>
<g >
<title>at::checked_dense_tensor_unwrap (2 samples, 0.01%)</title><rect x="489.4" y="1765" width="0.1" height="15.0" fill="rgb(241,101,45)" rx="2" ry="2" />
<text  x="492.35" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="885" width="5.5" height="15.0" fill="rgb(242,157,47)" rx="2" ry="2" />
<text  x="67.31" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1109" width="0.3" height="15.0" fill="rgb(236,10,12)" rx="2" ry="2" />
<text  x="472.55" y="1119.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (6 samples, 0.04%)</title><rect x="745.0" y="2053" width="0.5" height="15.0" fill="rgb(230,177,54)" rx="2" ry="2" />
<text  x="747.98" y="2063.5" ></text>
</g>
<g >
<title>c10::TensorType::TensorType (4 samples, 0.03%)</title><rect x="1183.9" y="1941" width="0.4" height="15.0" fill="rgb(241,174,33)" rx="2" ry="2" />
<text  x="1186.95" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1781" width="0.4" height="15.0" fill="rgb(207,61,1)" rx="2" ry="2" />
<text  x="221.50" y="1791.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,445 samples, 10.59%)</title><rect x="494.9" y="1941" width="124.9" height="15.0" fill="rgb(237,70,16)" rx="2" ry="2" />
<text  x="497.89" y="1951.5" >fasttext::Dense..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="218.7" y="1029" width="0.1" height="15.0" fill="rgb(208,73,49)" rx="2" ry="2" />
<text  x="221.67" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="997" width="0.2" height="15.0" fill="rgb(212,47,9)" rx="2" ry="2" />
<text  x="1183.49" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="218.7" y="965" width="0.1" height="15.0" fill="rgb(225,59,7)" rx="2" ry="2" />
<text  x="221.67" y="975.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (2 samples, 0.01%)</title><rect x="740.7" y="2037" width="0.2" height="15.0" fill="rgb(214,225,29)" rx="2" ry="2" />
<text  x="743.74" y="2047.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcFeatures (192 samples, 1.41%)</title><rect x="200.3" y="1973" width="16.6" height="15.0" fill="rgb(251,199,52)" rx="2" ry="2" />
<text  x="203.34" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="885" width="0.1" height="15.0" fill="rgb(214,156,51)" rx="2" ry="2" />
<text  x="221.67" y="895.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1781" width="5.6" height="15.0" fill="rgb(240,152,39)" rx="2" ry="2" />
<text  x="67.31" y="1791.5" ></text>
</g>
<g >
<title>std::istream::get@plt (2 samples, 0.01%)</title><rect x="1182.5" y="2053" width="0.1" height="15.0" fill="rgb(245,60,44)" rx="2" ry="2" />
<text  x="1185.48" y="2063.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (49 samples, 0.36%)</title><rect x="95.4" y="2021" width="4.2" height="15.0" fill="rgb(225,102,37)" rx="2" ry="2" />
<text  x="98.35" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1653" width="0.3" height="15.0" fill="rgb(209,174,7)" rx="2" ry="2" />
<text  x="1183.40" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1180.3" y="2021" width="0.4" height="15.0" fill="rgb(249,75,26)" rx="2" ry="2" />
<text  x="1183.31" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1179.5" y="2021" width="0.2" height="15.0" fill="rgb(238,13,3)" rx="2" ry="2" />
<text  x="1182.54" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="183.6" y="1957" width="0.1" height="15.0" fill="rgb(234,210,4)" rx="2" ry="2" />
<text  x="186.56" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1365" width="5.5" height="15.0" fill="rgb(251,78,32)" rx="2" ry="2" />
<text  x="67.31" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="469.5" y="1221" width="0.3" height="15.0" fill="rgb(239,103,29)" rx="2" ry="2" />
<text  x="472.55" y="1231.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (10 samples, 0.07%)</title><rect x="462.5" y="1989" width="0.8" height="15.0" fill="rgb(225,15,41)" rx="2" ry="2" />
<text  x="465.46" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="469.5" y="1029" width="0.3" height="15.0" fill="rgb(232,47,29)" rx="2" ry="2" />
<text  x="472.55" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1301" width="0.3" height="15.0" fill="rgb(221,102,9)" rx="2" ry="2" />
<text  x="221.59" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="805" width="0.2" height="15.0" fill="rgb(241,142,38)" rx="2" ry="2" />
<text  x="472.63" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="458.0" y="1989" width="0.2" height="15.0" fill="rgb(218,161,45)" rx="2" ry="2" />
<text  x="461.05" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (5 samples, 0.04%)</title><rect x="1162.0" y="2037" width="0.4" height="15.0" fill="rgb(254,2,24)" rx="2" ry="2" />
<text  x="1164.98" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="613" width="0.2" height="15.0" fill="rgb(238,40,6)" rx="2" ry="2" />
<text  x="1183.05" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14 samples, 0.10%)</title><rect x="468.8" y="1797" width="1.2" height="15.0" fill="rgb(247,63,23)" rx="2" ry="2" />
<text  x="471.77" y="1807.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (2 samples, 0.01%)</title><rect x="1185.1" y="1957" width="0.1" height="15.0" fill="rgb(221,109,28)" rx="2" ry="2" />
<text  x="1188.07" y="1967.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (19 samples, 0.14%)</title><rect x="619.8" y="1941" width="1.7" height="15.0" fill="rgb(206,87,18)" rx="2" ry="2" />
<text  x="622.85" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (16 samples, 0.12%)</title><rect x="622.4" y="1941" width="1.3" height="15.0" fill="rgb(224,87,0)" rx="2" ry="2" />
<text  x="625.35" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1061" width="0.2" height="15.0" fill="rgb(252,66,45)" rx="2" ry="2" />
<text  x="1183.49" y="1071.5" ></text>
</g>
<g >
<title>memcpy@plt (5 samples, 0.04%)</title><rect x="1013.9" y="2053" width="0.5" height="15.0" fill="rgb(240,201,3)" rx="2" ry="2" />
<text  x="1016.93" y="2063.5" ></text>
</g>
<g >
<title>at::native::copy_impl (15 samples, 0.11%)</title><rect x="752.9" y="2037" width="1.3" height="15.0" fill="rgb(251,154,41)" rx="2" ry="2" />
<text  x="755.94" y="2047.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (80 samples, 0.59%)</title><rect x="1059.9" y="2053" width="7.0" height="15.0" fill="rgb(232,52,17)" rx="2" ry="2" />
<text  x="1062.94" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (7 samples, 0.05%)</title><rect x="458.3" y="2005" width="0.6" height="15.0" fill="rgb(208,126,12)" rx="2" ry="2" />
<text  x="461.30" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="789" width="0.2" height="15.0" fill="rgb(247,107,5)" rx="2" ry="2" />
<text  x="1183.49" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1605" width="0.5" height="15.0" fill="rgb(238,51,37)" rx="2" ry="2" />
<text  x="472.55" y="1615.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (12 samples, 0.09%)</title><rect x="216.9" y="1973" width="1.1" height="15.0" fill="rgb(224,150,32)" rx="2" ry="2" />
<text  x="219.94" y="1983.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (114 samples, 0.84%)</title><rect x="1139.6" y="2053" width="9.8" height="15.0" fill="rgb(233,22,15)" rx="2" ry="2" />
<text  x="1142.58" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1157" width="0.3" height="15.0" fill="rgb(234,90,50)" rx="2" ry="2" />
<text  x="1182.97" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (15 samples, 0.11%)</title><rect x="206.6" y="1925" width="1.3" height="15.0" fill="rgb(218,167,22)" rx="2" ry="2" />
<text  x="209.57" y="1935.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (42 samples, 0.31%)</title><rect x="212.8" y="1941" width="3.6" height="15.0" fill="rgb(233,61,25)" rx="2" ry="2" />
<text  x="215.79" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.06%)</title><rect x="468.9" y="1733" width="0.6" height="15.0" fill="rgb(248,80,34)" rx="2" ry="2" />
<text  x="471.86" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1845" width="0.3" height="15.0" fill="rgb(225,2,45)" rx="2" ry="2" />
<text  x="1183.40" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="165" width="0.2" height="15.0" fill="rgb(217,203,40)" rx="2" ry="2" />
<text  x="1183.05" y="175.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.01%)</title><rect x="51.0" y="2021" width="0.2" height="15.0" fill="rgb(225,90,38)" rx="2" ry="2" />
<text  x="53.99" y="2031.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (9 samples, 0.07%)</title><rect x="68.4" y="69" width="0.8" height="15.0" fill="rgb(242,4,52)" rx="2" ry="2" />
<text  x="71.37" y="79.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="229" width="5.5" height="15.0" fill="rgb(249,113,33)" rx="2" ry="2" />
<text  x="67.31" y="239.5" ></text>
</g>
<g >
<title>cfree (96 samples, 0.70%)</title><rect x="757.9" y="2053" width="8.3" height="15.0" fill="rgb(246,194,40)" rx="2" ry="2" />
<text  x="760.87" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1413" width="5.5" height="15.0" fill="rgb(231,86,32)" rx="2" ry="2" />
<text  x="67.31" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="405" width="0.1" height="15.0" fill="rgb(207,18,20)" rx="2" ry="2" />
<text  x="1183.57" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="789" width="0.2" height="15.0" fill="rgb(228,62,5)" rx="2" ry="2" />
<text  x="472.63" y="799.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1301" width="5.5" height="15.0" fill="rgb(228,26,24)" rx="2" ry="2" />
<text  x="67.31" y="1311.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (33 samples, 0.24%)</title><rect x="458.9" y="1957" width="2.9" height="15.0" fill="rgb(230,80,40)" rx="2" ry="2" />
<text  x="461.91" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.03%)</title><rect x="684.9" y="2021" width="0.3" height="15.0" fill="rgb(209,86,7)" rx="2" ry="2" />
<text  x="687.88" y="2031.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (16 samples, 0.12%)</title><rect x="79.7" y="2021" width="1.4" height="15.0" fill="rgb(246,146,8)" rx="2" ry="2" />
<text  x="82.70" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="517" width="0.2" height="15.0" fill="rgb(248,174,13)" rx="2" ry="2" />
<text  x="1183.05" y="527.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="965" width="5.5" height="15.0" fill="rgb(209,56,29)" rx="2" ry="2" />
<text  x="67.31" y="975.5" ></text>
</g>
<g >
<title>memcpy@plt (2 samples, 0.01%)</title><rect x="82.9" y="2021" width="0.2" height="15.0" fill="rgb(226,164,33)" rx="2" ry="2" />
<text  x="85.90" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="485" width="5.5" height="15.0" fill="rgb(217,118,38)" rx="2" ry="2" />
<text  x="67.31" y="495.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (2 samples, 0.01%)</title><rect x="70.5" y="1989" width="0.2" height="15.0" fill="rgb(231,213,54)" rx="2" ry="2" />
<text  x="73.53" y="1999.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (2 samples, 0.01%)</title><rect x="756.5" y="2005" width="0.2" height="15.0" fill="rgb(228,177,0)" rx="2" ry="2" />
<text  x="759.48" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1573" width="0.3" height="15.0" fill="rgb(241,9,43)" rx="2" ry="2" />
<text  x="1182.97" y="1583.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.01%)</title><rect x="50.3" y="2037" width="0.2" height="15.0" fill="rgb(234,77,42)" rx="2" ry="2" />
<text  x="53.30" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.01%)</title><rect x="1163.0" y="2053" width="0.2" height="15.0" fill="rgb(228,229,53)" rx="2" ry="2" />
<text  x="1166.02" y="2063.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (20 samples, 0.15%)</title><rect x="62.6" y="1941" width="1.7" height="15.0" fill="rgb(236,119,39)" rx="2" ry="2" />
<text  x="65.58" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="693" width="0.2" height="15.0" fill="rgb(248,26,0)" rx="2" ry="2" />
<text  x="1183.05" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="389" width="0.2" height="15.0" fill="rgb(223,130,24)" rx="2" ry="2" />
<text  x="1183.05" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.02%)</title><rect x="463.7" y="1973" width="0.2" height="15.0" fill="rgb(226,64,14)" rx="2" ry="2" />
<text  x="466.67" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1829" width="0.4" height="15.0" fill="rgb(226,135,34)" rx="2" ry="2" />
<text  x="221.50" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="469.2" y="1445" width="0.3" height="15.0" fill="rgb(235,106,10)" rx="2" ry="2" />
<text  x="472.20" y="1455.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable_differentiable_view (2 samples, 0.01%)</title><rect x="647.3" y="1989" width="0.2" height="15.0" fill="rgb(213,123,23)" rx="2" ry="2" />
<text  x="650.35" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="981" width="5.5" height="15.0" fill="rgb(215,33,15)" rx="2" ry="2" />
<text  x="67.31" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1237" width="0.3" height="15.0" fill="rgb(253,62,42)" rx="2" ry="2" />
<text  x="1182.97" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1749" width="0.5" height="15.0" fill="rgb(205,83,44)" rx="2" ry="2" />
<text  x="472.55" y="1759.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (13 samples, 0.10%)</title><rect x="681.9" y="2037" width="1.1" height="15.0" fill="rgb(210,125,4)" rx="2" ry="2" />
<text  x="684.85" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="469.5" y="997" width="0.3" height="15.0" fill="rgb(222,34,32)" rx="2" ry="2" />
<text  x="472.55" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="469.5" y="1125" width="0.3" height="15.0" fill="rgb(240,162,50)" rx="2" ry="2" />
<text  x="472.55" y="1135.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (8 samples, 0.06%)</title><rect x="456.6" y="1973" width="0.7" height="15.0" fill="rgb(250,214,31)" rx="2" ry="2" />
<text  x="459.58" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1589" width="0.3" height="15.0" fill="rgb(221,43,5)" rx="2" ry="2" />
<text  x="1183.40" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="218.7" y="1093" width="0.1" height="15.0" fill="rgb(228,91,39)" rx="2" ry="2" />
<text  x="221.67" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.4" y="1397" width="0.1" height="15.0" fill="rgb(250,147,19)" rx="2" ry="2" />
<text  x="472.37" y="1407.5" ></text>
</g>
<g >
<title>at::TensorIterator::data_ptr (2 samples, 0.01%)</title><rect x="752.3" y="2053" width="0.2" height="15.0" fill="rgb(229,25,0)" rx="2" ry="2" />
<text  x="755.33" y="2063.5" ></text>
</g>
<g >
<title>std::swap&lt;rocksdb::TransactionBaseImpl::SavePoint&gt; (44 samples, 0.32%)</title><rect x="1183.3" y="2053" width="3.8" height="15.0" fill="rgb(211,85,49)" rx="2" ry="2" />
<text  x="1186.34" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="648.6" y="2005" width="0.2" height="15.0" fill="rgb(216,179,31)" rx="2" ry="2" />
<text  x="651.64" y="2015.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (16 samples, 0.12%)</title><rect x="49.8" y="2053" width="1.4" height="15.0" fill="rgb(223,35,50)" rx="2" ry="2" />
<text  x="52.78" y="2063.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TNewsCluster*, std::vector&lt;TNewsCluster, std::allocator&lt;TNewsCluster&gt; &gt; &gt;, TNewsCluster*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (3 samples, 0.02%)</title><rect x="457.3" y="1973" width="0.2" height="15.0" fill="rgb(247,71,35)" rx="2" ry="2" />
<text  x="460.27" y="1983.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (71 samples, 0.52%)</title><rect x="983.5" y="2053" width="6.1" height="15.0" fill="rgb(238,86,30)" rx="2" ry="2" />
<text  x="986.49" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::add (5 samples, 0.04%)</title><rect x="185.1" y="1941" width="0.5" height="15.0" fill="rgb(224,71,2)" rx="2" ry="2" />
<text  x="188.12" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1541" width="0.3" height="15.0" fill="rgb(218,9,42)" rx="2" ry="2" />
<text  x="1182.97" y="1551.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="641.3" y="2037" width="0.2" height="15.0" fill="rgb(251,160,12)" rx="2" ry="2" />
<text  x="644.29" y="2047.5" ></text>
</g>
<g >
<title>TDbDocument::operator= (2 samples, 0.01%)</title><rect x="457.1" y="1941" width="0.2" height="15.0" fill="rgb(220,122,33)" rx="2" ry="2" />
<text  x="460.09" y="1951.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (2 samples, 0.01%)</title><rect x="218.2" y="1909" width="0.1" height="15.0" fill="rgb(242,223,18)" rx="2" ry="2" />
<text  x="221.15" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="437" width="0.2" height="15.0" fill="rgb(216,71,37)" rx="2" ry="2" />
<text  x="472.63" y="447.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (6 samples, 0.04%)</title><rect x="69.2" y="53" width="0.5" height="15.0" fill="rgb(243,145,3)" rx="2" ry="2" />
<text  x="72.15" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1221" width="0.2" height="15.0" fill="rgb(254,201,24)" rx="2" ry="2" />
<text  x="1183.49" y="1231.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_float (2 samples, 0.01%)</title><rect x="461.5" y="1925" width="0.2" height="15.0" fill="rgb(251,65,54)" rx="2" ry="2" />
<text  x="464.50" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="1013" width="0.1" height="15.0" fill="rgb(232,205,17)" rx="2" ry="2" />
<text  x="221.67" y="1023.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Task_state&lt;std::_Bind&lt;std::optional&lt;TDbDocument&gt;  (2 samples, 0.01%)</title><rect x="50.6" y="1989" width="0.2" height="15.0" fill="rgb(229,105,14)" rx="2" ry="2" />
<text  x="53.64" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="325" width="5.5" height="15.0" fill="rgb(225,132,1)" rx="2" ry="2" />
<text  x="67.31" y="335.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (2 samples, 0.01%)</title><rect x="1185.8" y="1877" width="0.1" height="15.0" fill="rgb(206,170,17)" rx="2" ry="2" />
<text  x="1188.76" y="1887.5" ></text>
</g>
<g >
<title>memchr@plt (3 samples, 0.02%)</title><rect x="1012.5" y="2053" width="0.2" height="15.0" fill="rgb(226,5,3)" rx="2" ry="2" />
<text  x="1015.46" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="869" width="0.2" height="15.0" fill="rgb(222,9,39)" rx="2" ry="2" />
<text  x="1183.49" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="468.9" y="1685" width="0.6" height="15.0" fill="rgb(233,193,39)" rx="2" ry="2" />
<text  x="471.94" y="1695.5" ></text>
</g>
<g >
<title>torch::autograd::profiler::hasCallbacks@plt (2 samples, 0.01%)</title><rect x="138.3" y="2021" width="0.2" height="15.0" fill="rgb(228,103,41)" rx="2" ry="2" />
<text  x="141.33" y="2031.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (2 samples, 0.01%)</title><rect x="218.2" y="1941" width="0.1" height="15.0" fill="rgb(242,17,40)" rx="2" ry="2" />
<text  x="221.15" y="1951.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="461.1" y="1877" width="0.1" height="15.0" fill="rgb(251,185,9)" rx="2" ry="2" />
<text  x="464.07" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="405" width="0.2" height="15.0" fill="rgb(247,4,45)" rx="2" ry="2" />
<text  x="1183.05" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1173" width="0.2" height="15.0" fill="rgb(248,171,13)" rx="2" ry="2" />
<text  x="1183.49" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1685" width="0.3" height="15.0" fill="rgb(236,141,6)" rx="2" ry="2" />
<text  x="221.59" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (7 samples, 0.05%)</title><rect x="218.3" y="1941" width="0.6" height="15.0" fill="rgb(250,37,44)" rx="2" ry="2" />
<text  x="221.33" y="1951.5" ></text>
</g>
<g >
<title>TClusterer::Cluster (2,975 samples, 21.80%)</title><rect x="200.3" y="2005" width="257.2" height="15.0" fill="rgb(243,208,38)" rx="2" ry="2" />
<text  x="203.25" y="2015.5" >TClusterer::Cluster</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14 samples, 0.10%)</title><rect x="468.8" y="1813" width="1.2" height="15.0" fill="rgb(252,43,26)" rx="2" ry="2" />
<text  x="471.77" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="469.0" y="1653" width="0.5" height="15.0" fill="rgb(231,84,38)" rx="2" ry="2" />
<text  x="472.03" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1301" width="0.2" height="15.0" fill="rgb(214,148,25)" rx="2" ry="2" />
<text  x="1183.49" y="1311.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (13 samples, 0.10%)</title><rect x="207.9" y="1941" width="1.1" height="15.0" fill="rgb(253,118,5)" rx="2" ry="2" />
<text  x="210.86" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="229" width="0.2" height="15.0" fill="rgb(245,24,16)" rx="2" ry="2" />
<text  x="1183.05" y="239.5" ></text>
</g>
<g >
<title>at::TensorIterator::analyze_memory_format (2 samples, 0.01%)</title><rect x="71.0" y="2005" width="0.1" height="15.0" fill="rgb(242,24,20)" rx="2" ry="2" />
<text  x="73.97" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="773" width="0.2" height="15.0" fill="rgb(225,171,3)" rx="2" ry="2" />
<text  x="1183.49" y="783.5" ></text>
</g>
<g >
<title>torch::autograd::deleteNode (2 samples, 0.01%)</title><rect x="742.3" y="2037" width="0.2" height="15.0" fill="rgb(252,49,11)" rx="2" ry="2" />
<text  x="745.30" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1493" width="0.2" height="15.0" fill="rgb(209,125,50)" rx="2" ry="2" />
<text  x="1183.49" y="1503.5" ></text>
</g>
<g >
<title>malloc (84 samples, 0.62%)</title><rect x="1005.1" y="2053" width="7.3" height="15.0" fill="rgb(214,33,14)" rx="2" ry="2" />
<text  x="1008.11" y="2063.5" ></text>
</g>
<g >
<title>TNewsCluster::operator= (3 samples, 0.02%)</title><rect x="457.3" y="1957" width="0.2" height="15.0" fill="rgb(244,93,8)" rx="2" ry="2" />
<text  x="460.27" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="218.7" y="869" width="0.1" height="15.0" fill="rgb(215,106,54)" rx="2" ry="2" />
<text  x="221.67" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1189" width="0.2" height="15.0" fill="rgb(217,105,38)" rx="2" ry="2" />
<text  x="1183.49" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1045" width="5.5" height="15.0" fill="rgb(221,185,0)" rx="2" ry="2" />
<text  x="67.31" y="1055.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan (7 samples, 0.05%)</title><rect x="185.8" y="1941" width="0.6" height="15.0" fill="rgb(224,40,20)" rx="2" ry="2" />
<text  x="188.81" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.03%)</title><rect x="647.2" y="2005" width="0.3" height="15.0" fill="rgb(218,126,51)" rx="2" ry="2" />
<text  x="650.17" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1077" width="0.2" height="15.0" fill="rgb(254,74,5)" rx="2" ry="2" />
<text  x="1183.49" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1179.9" y="1861" width="0.4" height="15.0" fill="rgb(253,88,41)" rx="2" ry="2" />
<text  x="1182.88" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15 samples, 0.11%)</title><rect x="468.7" y="1845" width="1.3" height="15.0" fill="rgb(206,90,25)" rx="2" ry="2" />
<text  x="471.68" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.20%)</title><rect x="641.6" y="2005" width="2.4" height="15.0" fill="rgb(252,160,30)" rx="2" ry="2" />
<text  x="644.64" y="2015.5" ></text>
</g>
<g >
<title>c10::TensorImpl::shallow_copy_and_detach (7 samples, 0.05%)</title><rect x="645.2" y="2005" width="0.6" height="15.0" fill="rgb(210,11,43)" rx="2" ry="2" />
<text  x="648.19" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1381" width="0.3" height="15.0" fill="rgb(234,89,29)" rx="2" ry="2" />
<text  x="221.59" y="1391.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::~Tokenizer (4 samples, 0.03%)</title><rect x="684.9" y="2037" width="0.3" height="15.0" fill="rgb(220,183,47)" rx="2" ry="2" />
<text  x="687.88" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1349" width="5.5" height="15.0" fill="rgb(225,12,41)" rx="2" ry="2" />
<text  x="67.31" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1445" width="0.5" height="15.0" fill="rgb(231,148,30)" rx="2" ry="2" />
<text  x="472.55" y="1455.5" ></text>
</g>
<g >
<title>GetHost (19 samples, 0.14%)</title><rect x="468.3" y="1957" width="1.7" height="15.0" fill="rgb(236,144,38)" rx="2" ry="2" />
<text  x="471.34" y="1967.5" ></text>
</g>
<g >
<title>operator delete@plt (4 samples, 0.03%)</title><rect x="729.8" y="2037" width="0.4" height="15.0" fill="rgb(247,58,40)" rx="2" ry="2" />
<text  x="732.85" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1317" width="0.3" height="15.0" fill="rgb(243,76,30)" rx="2" ry="2" />
<text  x="221.59" y="1327.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (3 samples, 0.02%)</title><rect x="216.7" y="1957" width="0.2" height="15.0" fill="rgb(219,225,12)" rx="2" ry="2" />
<text  x="219.68" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="261" width="5.5" height="15.0" fill="rgb(216,40,11)" rx="2" ry="2" />
<text  x="67.31" y="271.5" ></text>
</g>
<g >
<title>caffe2::detail::_New&lt;float&gt; (21 samples, 0.15%)</title><rect x="756.1" y="2053" width="1.8" height="15.0" fill="rgb(208,34,20)" rx="2" ry="2" />
<text  x="759.05" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1349" width="0.3" height="15.0" fill="rgb(224,27,26)" rx="2" ry="2" />
<text  x="1182.97" y="1359.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="613" width="5.5" height="15.0" fill="rgb(221,40,23)" rx="2" ry="2" />
<text  x="67.31" y="623.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::optional&lt;TDbDocument&gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::_Bind&lt;std::optional&lt;TDbDocument&gt;  (2,018 samples, 14.79%)</title><rect x="465.8" y="1989" width="174.5" height="15.0" fill="rgb(231,33,51)" rx="2" ry="2" />
<text  x="468.83" y="1999.5" >std::__future_base::_T..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="661" width="0.1" height="15.0" fill="rgb(208,45,11)" rx="2" ry="2" />
<text  x="1183.57" y="671.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1333" width="5.5" height="15.0" fill="rgb(205,117,24)" rx="2" ry="2" />
<text  x="67.31" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1061" width="0.3" height="15.0" fill="rgb(225,130,29)" rx="2" ry="2" />
<text  x="1182.97" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1573" width="5.5" height="15.0" fill="rgb(215,229,34)" rx="2" ry="2" />
<text  x="67.31" y="1583.5" ></text>
</g>
<g >
<title>at::native::add (2 samples, 0.01%)</title><rect x="1185.8" y="1893" width="0.1" height="15.0" fill="rgb(233,11,33)" rx="2" ry="2" />
<text  x="1188.76" y="1903.5" ></text>
</g>
<g >
<title>c10::SmallVectorImpl&lt;long&gt;::operator= (2 samples, 0.01%)</title><rect x="644.6" y="2005" width="0.2" height="15.0" fill="rgb(227,64,31)" rx="2" ry="2" />
<text  x="647.58" y="2015.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (8 samples, 0.06%)</title><rect x="218.3" y="1973" width="0.7" height="15.0" fill="rgb(223,39,26)" rx="2" ry="2" />
<text  x="221.33" y="1983.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="210.2" y="1941" width="0.3" height="15.0" fill="rgb(252,170,28)" rx="2" ry="2" />
<text  x="213.20" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (41 samples, 0.30%)</title><rect x="732.6" y="2037" width="3.6" height="15.0" fill="rgb(243,58,30)" rx="2" ry="2" />
<text  x="735.61" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_construct_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.01%)</title><rect x="215.6" y="1909" width="0.1" height="15.0" fill="rgb(216,98,7)" rx="2" ry="2" />
<text  x="218.56" y="1919.5" ></text>
</g>
<g >
<title>onmt::get_alphabet_id (7 samples, 0.05%)</title><rect x="1054.2" y="2053" width="0.6" height="15.0" fill="rgb(214,217,20)" rx="2" ry="2" />
<text  x="1057.23" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="213" width="0.1" height="15.0" fill="rgb(241,46,49)" rx="2" ry="2" />
<text  x="1183.57" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1573" width="0.3" height="15.0" fill="rgb(229,223,46)" rx="2" ry="2" />
<text  x="221.59" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="853" width="0.2" height="15.0" fill="rgb(251,90,46)" rx="2" ry="2" />
<text  x="472.63" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="709" width="0.2" height="15.0" fill="rgb(212,192,51)" rx="2" ry="2" />
<text  x="1183.05" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1179.7" y="2021" width="0.6" height="15.0" fill="rgb(246,208,11)" rx="2" ry="2" />
<text  x="1182.71" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1637" width="5.6" height="15.0" fill="rgb(206,7,30)" rx="2" ry="2" />
<text  x="67.31" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="581" width="0.2" height="15.0" fill="rgb(226,208,28)" rx="2" ry="2" />
<text  x="472.63" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1605" width="0.3" height="15.0" fill="rgb(243,3,15)" rx="2" ry="2" />
<text  x="1182.97" y="1615.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (3 samples, 0.02%)</title><rect x="215.7" y="1909" width="0.3" height="15.0" fill="rgb(225,190,44)" rx="2" ry="2" />
<text  x="218.73" y="1919.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (11 samples, 0.08%)</title><rect x="210.7" y="1925" width="1.0" height="15.0" fill="rgb(226,102,8)" rx="2" ry="2" />
<text  x="213.72" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="933" width="0.2" height="15.0" fill="rgb(241,173,39)" rx="2" ry="2" />
<text  x="472.63" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="293" width="0.2" height="15.0" fill="rgb(217,95,21)" rx="2" ry="2" />
<text  x="1183.05" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="197" width="0.1" height="15.0" fill="rgb(216,1,46)" rx="2" ry="2" />
<text  x="1183.57" y="207.5" ></text>
</g>
<g >
<title>at::native::setStrided (4 samples, 0.03%)</title><rect x="642.4" y="1973" width="0.4" height="15.0" fill="rgb(211,121,3)" rx="2" ry="2" />
<text  x="645.42" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1541" width="0.5" height="15.0" fill="rgb(215,121,42)" rx="2" ry="2" />
<text  x="472.55" y="1551.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::DifferentiableViewMeta (2 samples, 0.01%)</title><rect x="647.3" y="1973" width="0.2" height="15.0" fill="rgb(222,164,34)" rx="2" ry="2" />
<text  x="650.35" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1125" width="5.5" height="15.0" fill="rgb(237,169,50)" rx="2" ry="2" />
<text  x="67.31" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="469" width="0.2" height="15.0" fill="rgb(206,61,6)" rx="2" ry="2" />
<text  x="472.63" y="479.5" ></text>
</g>
<g >
<title>torch::zeros (15 samples, 0.11%)</title><rect x="490.6" y="1909" width="1.3" height="15.0" fill="rgb(225,97,32)" rx="2" ry="2" />
<text  x="493.56" y="1919.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (2 samples, 0.01%)</title><rect x="684.9" y="2005" width="0.2" height="15.0" fill="rgb(216,165,44)" rx="2" ry="2" />
<text  x="687.88" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.01%)</title><rect x="736.2" y="2005" width="0.1" height="15.0" fill="rgb(239,13,43)" rx="2" ry="2" />
<text  x="739.16" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="421" width="5.5" height="15.0" fill="rgb(229,50,29)" rx="2" ry="2" />
<text  x="67.31" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="661" width="0.2" height="15.0" fill="rgb(220,97,41)" rx="2" ry="2" />
<text  x="1183.05" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.1" y="1509" width="0.4" height="15.0" fill="rgb(242,154,19)" rx="2" ry="2" />
<text  x="472.11" y="1519.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (113 samples, 0.83%)</title><rect x="1042.8" y="2037" width="9.8" height="15.0" fill="rgb(248,171,14)" rx="2" ry="2" />
<text  x="1045.81" y="2047.5" ></text>
</g>
<g >
<title>std::locale::~locale (5 samples, 0.04%)</title><rect x="637.1" y="1941" width="0.5" height="15.0" fill="rgb(216,199,19)" rx="2" ry="2" />
<text  x="640.14" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1669" width="0.3" height="15.0" fill="rgb(225,158,19)" rx="2" ry="2" />
<text  x="221.59" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1525" width="0.2" height="15.0" fill="rgb(215,120,44)" rx="2" ry="2" />
<text  x="1183.49" y="1535.5" ></text>
</g>
<g >
<title>[unknown] (12 samples, 0.09%)</title><rect x="492.5" y="1941" width="1.0" height="15.0" fill="rgb(229,82,22)" rx="2" ry="2" />
<text  x="495.46" y="1951.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (2 samples, 0.01%)</title><rect x="756.7" y="2021" width="0.2" height="15.0" fill="rgb(213,31,33)" rx="2" ry="2" />
<text  x="759.74" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.07%)</title><rect x="492.5" y="1925" width="0.8" height="15.0" fill="rgb(240,203,7)" rx="2" ry="2" />
<text  x="495.46" y="1935.5" ></text>
</g>
<g >
<title>TDocument::TDocument (7 samples, 0.05%)</title><rect x="183.6" y="1989" width="0.6" height="15.0" fill="rgb(249,15,28)" rx="2" ry="2" />
<text  x="186.56" y="1999.5" ></text>
</g>
<g >
<title>nlohmann::detail::output_string_adapter&lt;char, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::write_characters (2 samples, 0.01%)</title><rect x="459.9" y="1909" width="0.1" height="15.0" fill="rgb(252,53,3)" rx="2" ry="2" />
<text  x="462.86" y="1919.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (204 samples, 1.50%)</title><rect x="200.3" y="1989" width="17.7" height="15.0" fill="rgb(231,183,15)" rx="2" ry="2" />
<text  x="203.34" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1179.5" y="1989" width="0.2" height="15.0" fill="rgb(253,51,31)" rx="2" ry="2" />
<text  x="1182.54" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1301" width="0.5" height="15.0" fill="rgb(246,164,19)" rx="2" ry="2" />
<text  x="472.55" y="1311.5" ></text>
</g>
<g >
<title>at::native::mm_cpu (2 samples, 0.01%)</title><rect x="76.2" y="2021" width="0.2" height="15.0" fill="rgb(215,172,26)" rx="2" ry="2" />
<text  x="79.24" y="2031.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (4 samples, 0.03%)</title><rect x="67.7" y="69" width="0.3" height="15.0" fill="rgb(211,166,52)" rx="2" ry="2" />
<text  x="70.68" y="79.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;&gt; (9 samples, 0.07%)</title><rect x="490.7" y="1893" width="0.8" height="15.0" fill="rgb(240,4,45)" rx="2" ry="2" />
<text  x="493.73" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1429" width="0.3" height="15.0" fill="rgb(228,116,1)" rx="2" ry="2" />
<text  x="221.59" y="1439.5" ></text>
</g>
<g >
<title>at::from_blob (15 samples, 0.11%)</title><rect x="488.7" y="1909" width="1.3" height="15.0" fill="rgb(238,113,46)" rx="2" ry="2" />
<text  x="491.75" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="533" width="0.1" height="15.0" fill="rgb(239,60,37)" rx="2" ry="2" />
<text  x="1183.57" y="543.5" ></text>
</g>
<g >
<title>onmt::ITokenizer::tokenize (2 samples, 0.01%)</title><rect x="638.8" y="1957" width="0.2" height="15.0" fill="rgb(227,126,8)" rx="2" ry="2" />
<text  x="641.79" y="1967.5" ></text>
</g>
<g >
<title>nlohmann::detail::output_string_adapter&lt;char, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::write_characters (2 samples, 0.01%)</title><rect x="461.1" y="1893" width="0.1" height="15.0" fill="rgb(243,129,18)" rx="2" ry="2" />
<text  x="464.07" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1285" width="0.3" height="15.0" fill="rgb(246,169,22)" rx="2" ry="2" />
<text  x="472.55" y="1295.5" ></text>
</g>
<g >
<title>c10::TensorImpl::release_resources (3 samples, 0.02%)</title><rect x="644.9" y="2005" width="0.3" height="15.0" fill="rgb(212,67,46)" rx="2" ry="2" />
<text  x="647.93" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="464.9" y="1845" width="0.2" height="15.0" fill="rgb(239,27,33)" rx="2" ry="2" />
<text  x="467.88" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="133" width="0.2" height="15.0" fill="rgb(210,108,5)" rx="2" ry="2" />
<text  x="1183.05" y="143.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="200.9" y="1925" width="0.2" height="15.0" fill="rgb(214,108,0)" rx="2" ry="2" />
<text  x="203.94" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1605" width="0.3" height="15.0" fill="rgb(219,149,53)" rx="2" ry="2" />
<text  x="1183.40" y="1615.5" ></text>
</g>
<g >
<title>at::globalLegacyTypeDispatch (2 samples, 0.01%)</title><rect x="757.3" y="2021" width="0.1" height="15.0" fill="rgb(235,14,10)" rx="2" ry="2" />
<text  x="760.26" y="2031.5" ></text>
</g>
<g >
<title>CleanFileName (2 samples, 0.01%)</title><rect x="183.3" y="2005" width="0.2" height="15.0" fill="rgb(251,207,49)" rx="2" ry="2" />
<text  x="186.30" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::operator&gt;&gt; (162 samples, 1.19%)</title><rect x="184.9" y="1989" width="14.0" height="15.0" fill="rgb(227,209,38)" rx="2" ry="2" />
<text  x="187.86" y="1999.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (4 samples, 0.03%)</title><rect x="636.5" y="1941" width="0.3" height="15.0" fill="rgb(247,72,22)" rx="2" ry="2" />
<text  x="639.45" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="341" width="5.5" height="15.0" fill="rgb(248,123,33)" rx="2" ry="2" />
<text  x="67.31" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.06%)</title><rect x="468.9" y="1717" width="0.6" height="15.0" fill="rgb(230,177,38)" rx="2" ry="2" />
<text  x="471.86" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="629" width="5.5" height="15.0" fill="rgb(246,185,42)" rx="2" ry="2" />
<text  x="67.31" y="639.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="597" width="5.5" height="15.0" fill="rgb(253,94,11)" rx="2" ry="2" />
<text  x="67.31" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1365" width="0.3" height="15.0" fill="rgb(213,50,38)" rx="2" ry="2" />
<text  x="221.59" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (21 samples, 0.15%)</title><rect x="756.1" y="2037" width="1.8" height="15.0" fill="rgb(245,122,31)" rx="2" ry="2" />
<text  x="759.05" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="853" width="0.2" height="15.0" fill="rgb(222,26,3)" rx="2" ry="2" />
<text  x="1183.49" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1180.3" y="2037" width="0.4" height="15.0" fill="rgb(206,49,28)" rx="2" ry="2" />
<text  x="1183.31" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (17 samples, 0.12%)</title><rect x="468.5" y="1925" width="1.5" height="15.0" fill="rgb(249,120,16)" rx="2" ry="2" />
<text  x="471.51" y="1935.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (10 samples, 0.07%)</title><rect x="66.1" y="37" width="0.9" height="15.0" fill="rgb(232,40,36)" rx="2" ry="2" />
<text  x="69.12" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="725" width="0.2" height="15.0" fill="rgb(210,55,8)" rx="2" ry="2" />
<text  x="1183.49" y="735.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="277" width="5.5" height="15.0" fill="rgb(230,39,3)" rx="2" ry="2" />
<text  x="67.31" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1179.5" y="2037" width="0.2" height="15.0" fill="rgb(230,68,16)" rx="2" ry="2" />
<text  x="1182.54" y="2047.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::add_kernel (2 samples, 0.01%)</title><rect x="1185.8" y="1861" width="0.1" height="15.0" fill="rgb(208,83,10)" rx="2" ry="2" />
<text  x="1188.76" y="1871.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (100 samples, 0.73%)</title><rect x="685.3" y="2037" width="8.7" height="15.0" fill="rgb(218,204,29)" rx="2" ry="2" />
<text  x="688.31" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="61.1" y="1989" width="0.2" height="15.0" fill="rgb(232,95,46)" rx="2" ry="2" />
<text  x="64.11" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15 samples, 0.11%)</title><rect x="468.7" y="1861" width="1.3" height="15.0" fill="rgb(217,199,34)" rx="2" ry="2" />
<text  x="471.68" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1013" width="5.5" height="15.0" fill="rgb(253,38,53)" rx="2" ry="2" />
<text  x="67.31" y="1023.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (7 samples, 0.05%)</title><rect x="489.2" y="1813" width="0.6" height="15.0" fill="rgb(228,94,10)" rx="2" ry="2" />
<text  x="492.18" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="117" width="5.5" height="15.0" fill="rgb(228,177,15)" rx="2" ry="2" />
<text  x="67.31" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="218.7" y="1061" width="0.1" height="15.0" fill="rgb(240,138,47)" rx="2" ry="2" />
<text  x="221.67" y="1071.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (12 samples, 0.09%)</title><rect x="677.3" y="2037" width="1.0" height="15.0" fill="rgb(240,90,27)" rx="2" ry="2" />
<text  x="680.27" y="2047.5" ></text>
</g>
<g >
<title>syscall (3 samples, 0.02%)</title><rect x="199.5" y="1973" width="0.2" height="15.0" fill="rgb(212,68,4)" rx="2" ry="2" />
<text  x="202.47" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (88 samples, 0.64%)</title><rect x="62.6" y="1957" width="7.6" height="15.0" fill="rgb(231,215,20)" rx="2" ry="2" />
<text  x="65.58" y="1967.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::at (5 samples, 0.04%)</title><rect x="183.7" y="1941" width="0.5" height="15.0" fill="rgb(211,205,8)" rx="2" ry="2" />
<text  x="186.74" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1397" width="5.5" height="15.0" fill="rgb(219,102,17)" rx="2" ry="2" />
<text  x="67.31" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1397" width="0.3" height="15.0" fill="rgb(243,200,24)" rx="2" ry="2" />
<text  x="221.59" y="1407.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="459.5" y="1909" width="0.2" height="15.0" fill="rgb(218,178,17)" rx="2" ry="2" />
<text  x="462.52" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="917" width="0.2" height="15.0" fill="rgb(231,21,15)" rx="2" ry="2" />
<text  x="1183.49" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1013" width="0.2" height="15.0" fill="rgb(232,171,47)" rx="2" ry="2" />
<text  x="1183.49" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1365" width="0.2" height="15.0" fill="rgb(252,1,26)" rx="2" ry="2" />
<text  x="1183.49" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.05%)</title><rect x="742.9" y="2005" width="0.6" height="15.0" fill="rgb(238,135,33)" rx="2" ry="2" />
<text  x="745.91" y="2015.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (5 samples, 0.04%)</title><rect x="67.2" y="53" width="0.4" height="15.0" fill="rgb(211,15,12)" rx="2" ry="2" />
<text  x="70.16" y="63.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1269" width="5.5" height="15.0" fill="rgb(239,130,14)" rx="2" ry="2" />
<text  x="67.31" y="1279.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (3 samples, 0.02%)</title><rect x="72.3" y="2005" width="0.2" height="15.0" fill="rgb(219,195,22)" rx="2" ry="2" />
<text  x="75.26" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1653" width="0.3" height="15.0" fill="rgb(207,91,29)" rx="2" ry="2" />
<text  x="221.59" y="1663.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_shape (2 samples, 0.01%)</title><rect x="71.3" y="1973" width="0.2" height="15.0" fill="rgb(219,0,29)" rx="2" ry="2" />
<text  x="74.31" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1557" width="0.5" height="15.0" fill="rgb(225,98,29)" rx="2" ry="2" />
<text  x="472.55" y="1567.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (8 samples, 0.06%)</title><rect x="69.2" y="101" width="0.6" height="15.0" fill="rgb(217,205,43)" rx="2" ry="2" />
<text  x="72.15" y="111.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (5 samples, 0.04%)</title><rect x="491.1" y="1877" width="0.4" height="15.0" fill="rgb(232,176,35)" rx="2" ry="2" />
<text  x="494.08" y="1887.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (6 samples, 0.04%)</title><rect x="69.2" y="69" width="0.5" height="15.0" fill="rgb(252,73,41)" rx="2" ry="2" />
<text  x="72.15" y="79.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1253" width="5.5" height="15.0" fill="rgb(241,143,33)" rx="2" ry="2" />
<text  x="67.31" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="981" width="0.2" height="15.0" fill="rgb(216,156,3)" rx="2" ry="2" />
<text  x="1183.49" y="991.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;TDbDocument*, __gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (4 samples, 0.03%)</title><rect x="456.7" y="1957" width="0.4" height="15.0" fill="rgb(253,25,19)" rx="2" ry="2" />
<text  x="459.75" y="1967.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (3 samples, 0.02%)</title><rect x="217.7" y="1957" width="0.3" height="15.0" fill="rgb(224,77,14)" rx="2" ry="2" />
<text  x="220.72" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1029" width="5.5" height="15.0" fill="rgb(219,140,30)" rx="2" ry="2" />
<text  x="67.31" y="1039.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, at::Tensor const&amp;, long, long, long, long&gt; (25 samples, 0.18%)</title><rect x="484.2" y="1925" width="2.2" height="15.0" fill="rgb(226,157,53)" rx="2" ry="2" />
<text  x="487.25" y="1935.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;long  (2 samples, 0.01%)</title><rect x="67.9" y="37" width="0.1" height="15.0" fill="rgb(238,209,22)" rx="2" ry="2" />
<text  x="70.85" y="47.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1557" width="5.5" height="15.0" fill="rgb(230,0,47)" rx="2" ry="2" />
<text  x="67.31" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="117" width="0.1" height="15.0" fill="rgb(248,150,31)" rx="2" ry="2" />
<text  x="1183.57" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1717" width="0.3" height="15.0" fill="rgb(206,82,14)" rx="2" ry="2" />
<text  x="1183.40" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="981" width="0.1" height="15.0" fill="rgb(207,180,5)" rx="2" ry="2" />
<text  x="221.67" y="991.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="757" width="5.5" height="15.0" fill="rgb(210,195,44)" rx="2" ry="2" />
<text  x="67.31" y="767.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1797" width="5.6" height="15.0" fill="rgb(226,137,22)" rx="2" ry="2" />
<text  x="67.31" y="1807.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::evalTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (2 samples, 0.01%)</title><rect x="218.2" y="1957" width="0.1" height="15.0" fill="rgb(219,84,15)" rx="2" ry="2" />
<text  x="221.15" y="1967.5" ></text>
</g>
<g >
<title>torch::autograd::SavedVariable::SavedVariable (3 samples, 0.02%)</title><rect x="643.2" y="1989" width="0.3" height="15.0" fill="rgb(238,53,8)" rx="2" ry="2" />
<text  x="646.20" y="1999.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.03%)</title><rect x="75.7" y="2021" width="0.4" height="15.0" fill="rgb(207,141,44)" rx="2" ry="2" />
<text  x="78.72" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="469.5" y="1093" width="0.3" height="15.0" fill="rgb(241,214,32)" rx="2" ry="2" />
<text  x="472.55" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="245" width="0.1" height="15.0" fill="rgb(230,141,28)" rx="2" ry="2" />
<text  x="1183.57" y="255.5" ></text>
</g>
<g >
<title>TNewsCluster::TNewsCluster (3 samples, 0.02%)</title><rect x="457.6" y="2005" width="0.3" height="15.0" fill="rgb(223,59,15)" rx="2" ry="2" />
<text  x="460.61" y="2015.5" ></text>
</g>
<g >
<title>at::TensorIterator::analyze_memory_format (3 samples, 0.02%)</title><rect x="68.4" y="37" width="0.2" height="15.0" fill="rgb(228,154,18)" rx="2" ry="2" />
<text  x="71.37" y="47.5" ></text>
</g>
<g >
<title>c10::TensorImpl::~TensorImpl (65 samples, 0.48%)</title><rect x="641.5" y="2037" width="5.6" height="15.0" fill="rgb(218,163,38)" rx="2" ry="2" />
<text  x="644.47" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1179.7" y="1973" width="0.6" height="15.0" fill="rgb(210,21,25)" rx="2" ry="2" />
<text  x="1182.71" y="1983.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (9 samples, 0.07%)</title><rect x="1180.8" y="2053" width="0.8" height="15.0" fill="rgb(229,169,28)" rx="2" ry="2" />
<text  x="1183.83" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1205" width="0.3" height="15.0" fill="rgb(252,61,33)" rx="2" ry="2" />
<text  x="1182.97" y="1215.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;int&gt; (2 samples, 0.01%)</title><rect x="1187.9" y="2053" width="0.2" height="15.0" fill="rgb(213,212,28)" rx="2" ry="2" />
<text  x="1190.92" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="181" width="0.2" height="15.0" fill="rgb(224,49,39)" rx="2" ry="2" />
<text  x="1183.05" y="191.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (112 samples, 0.82%)</title><rect x="768.7" y="2053" width="9.7" height="15.0" fill="rgb(216,24,12)" rx="2" ry="2" />
<text  x="771.68" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (10 samples, 0.07%)</title><rect x="693.1" y="2021" width="0.9" height="15.0" fill="rgb(232,159,2)" rx="2" ry="2" />
<text  x="696.09" y="2031.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.01%)</title><rect x="70.7" y="1989" width="0.2" height="15.0" fill="rgb(246,145,22)" rx="2" ry="2" />
<text  x="73.71" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1253" width="0.3" height="15.0" fill="rgb(229,5,22)" rx="2" ry="2" />
<text  x="472.55" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="597" width="0.2" height="15.0" fill="rgb(223,133,8)" rx="2" ry="2" />
<text  x="472.63" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1653" width="0.5" height="15.0" fill="rgb(232,65,5)" rx="2" ry="2" />
<text  x="472.55" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.1" y="85" width="0.2" height="15.0" fill="rgb(254,37,50)" rx="2" ry="2" />
<text  x="1183.14" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1333" width="0.5" height="15.0" fill="rgb(228,172,30)" rx="2" ry="2" />
<text  x="472.55" y="1343.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (2 samples, 0.01%)</title><rect x="457.1" y="1957" width="0.2" height="15.0" fill="rgb(253,198,52)" rx="2" ry="2" />
<text  x="460.09" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1669" width="0.5" height="15.0" fill="rgb(240,104,38)" rx="2" ry="2" />
<text  x="472.55" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="741" width="0.2" height="15.0" fill="rgb(240,163,54)" rx="2" ry="2" />
<text  x="472.63" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1141" width="0.3" height="15.0" fill="rgb(248,85,49)" rx="2" ry="2" />
<text  x="1182.97" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="53" width="0.1" height="15.0" fill="rgb(214,137,28)" rx="2" ry="2" />
<text  x="1183.57" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.04%)</title><rect x="201.5" y="1925" width="0.4" height="15.0" fill="rgb(232,114,2)" rx="2" ry="2" />
<text  x="204.46" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="965" width="0.2" height="15.0" fill="rgb(215,204,35)" rx="2" ry="2" />
<text  x="1183.05" y="975.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (2 samples, 0.01%)</title><rect x="60.3" y="2005" width="0.2" height="15.0" fill="rgb(238,64,49)" rx="2" ry="2" />
<text  x="63.33" y="2015.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 8, 4, false, false&gt;::operator (514 samples, 3.77%)</title><rect x="138.5" y="1973" width="44.5" height="15.0" fill="rgb(241,74,29)" rx="2" ry="2" />
<text  x="141.51" y="1983.5" >Eige..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1941" width="0.3" height="15.0" fill="rgb(247,114,48)" rx="2" ry="2" />
<text  x="1183.40" y="1951.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="210.3" y="1925" width="0.2" height="15.0" fill="rgb(243,11,47)" rx="2" ry="2" />
<text  x="213.28" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1461" width="5.5" height="15.0" fill="rgb(251,71,32)" rx="2" ry="2" />
<text  x="67.31" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="325" width="0.1" height="15.0" fill="rgb(241,78,28)" rx="2" ry="2" />
<text  x="1183.57" y="335.5" ></text>
</g>
<g >
<title>c10::SmallVectorImpl&lt;at::OperandInfo&gt;::emplace_back&lt;at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="754.1" y="2021" width="0.1" height="15.0" fill="rgb(253,47,26)" rx="2" ry="2" />
<text  x="757.06" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="613" width="0.2" height="15.0" fill="rgb(254,143,42)" rx="2" ry="2" />
<text  x="472.63" y="623.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="661" width="5.5" height="15.0" fill="rgb(248,80,50)" rx="2" ry="2" />
<text  x="67.31" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="437" width="0.1" height="15.0" fill="rgb(230,96,32)" rx="2" ry="2" />
<text  x="1183.57" y="447.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::sax_parse_internal&lt;nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; (162 samples, 1.19%)</title><rect x="184.9" y="1957" width="14.0" height="15.0" fill="rgb(222,225,30)" rx="2" ry="2" />
<text  x="187.86" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1141" width="5.5" height="15.0" fill="rgb(248,12,3)" rx="2" ry="2" />
<text  x="67.31" y="1151.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (1,519 samples, 11.13%)</title><rect x="851.1" y="2053" width="131.4" height="15.0" fill="rgb(234,196,47)" rx="2" ry="2" />
<text  x="854.09" y="2063.5" >fasttext::Produc..</text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="49.8" y="2037" width="0.5" height="15.0" fill="rgb(228,57,54)" rx="2" ry="2" />
<text  x="52.78" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1925" width="5.6" height="15.0" fill="rgb(206,65,46)" rx="2" ry="2" />
<text  x="67.31" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="464.9" y="2005" width="0.2" height="15.0" fill="rgb(214,105,44)" rx="2" ry="2" />
<text  x="467.88" y="2015.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (8 samples, 0.06%)</title><rect x="69.2" y="85" width="0.6" height="15.0" fill="rgb(243,154,54)" rx="2" ry="2" />
<text  x="72.15" y="95.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.04%)</title><rect x="132.9" y="2021" width="0.5" height="15.0" fill="rgb(212,229,40)" rx="2" ry="2" />
<text  x="135.89" y="2031.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="216.5" y="1941" width="0.2" height="15.0" fill="rgb(227,150,26)" rx="2" ry="2" />
<text  x="219.51" y="1951.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (3 samples, 0.02%)</title><rect x="464.9" y="1893" width="0.2" height="15.0" fill="rgb(216,83,47)" rx="2" ry="2" />
<text  x="467.88" y="1903.5" ></text>
</g>
<g >
<title>posix_memalign (2 samples, 0.01%)</title><rect x="1149.8" y="2053" width="0.2" height="15.0" fill="rgb(224,209,44)" rx="2" ry="2" />
<text  x="1152.79" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1179.7" y="1957" width="0.6" height="15.0" fill="rgb(217,91,43)" rx="2" ry="2" />
<text  x="1182.71" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="373" width="0.1" height="15.0" fill="rgb(236,100,9)" rx="2" ry="2" />
<text  x="1183.57" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1621" width="0.3" height="15.0" fill="rgb(209,9,44)" rx="2" ry="2" />
<text  x="1182.97" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.1" y="1589" width="0.4" height="15.0" fill="rgb(234,161,46)" rx="2" ry="2" />
<text  x="472.11" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1477" width="0.3" height="15.0" fill="rgb(216,31,23)" rx="2" ry="2" />
<text  x="221.59" y="1487.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="745.5" y="2053" width="0.3" height="15.0" fill="rgb(227,100,21)" rx="2" ry="2" />
<text  x="748.50" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1781" width="0.3" height="15.0" fill="rgb(249,210,5)" rx="2" ry="2" />
<text  x="1182.97" y="1791.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (31 samples, 0.23%)</title><rect x="459.0" y="1941" width="2.7" height="15.0" fill="rgb(219,217,33)" rx="2" ry="2" />
<text  x="462.00" y="1951.5" ></text>
</g>
<g >
<title>at::native::zero_ (2 samples, 0.01%)</title><rect x="65.0" y="37" width="0.2" height="15.0" fill="rgb(247,14,13)" rx="2" ry="2" />
<text  x="68.00" y="47.5" ></text>
</g>
<g >
<title>at::Tensor::contiguous (2 samples, 0.01%)</title><rect x="483.6" y="1925" width="0.2" height="15.0" fill="rgb(249,68,47)" rx="2" ry="2" />
<text  x="486.64" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="101" width="0.1" height="15.0" fill="rgb(236,190,50)" rx="2" ry="2" />
<text  x="1183.57" y="111.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (2 samples, 0.01%)</title><rect x="753.8" y="2021" width="0.2" height="15.0" fill="rgb(231,174,41)" rx="2" ry="2" />
<text  x="756.80" y="2031.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::~Dictionary (3 samples, 0.02%)</title><rect x="199.8" y="1989" width="0.3" height="15.0" fill="rgb(210,201,31)" rx="2" ry="2" />
<text  x="202.82" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="629" width="0.1" height="15.0" fill="rgb(247,64,33)" rx="2" ry="2" />
<text  x="1183.57" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="629" width="0.2" height="15.0" fill="rgb(244,20,25)" rx="2" ry="2" />
<text  x="472.63" y="639.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::zeros (4 samples, 0.03%)</title><rect x="756.4" y="2021" width="0.3" height="15.0" fill="rgb(221,79,4)" rx="2" ry="2" />
<text  x="759.40" y="2031.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::PlainObjectBase&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, 0&gt; &gt; (2 samples, 0.01%)</title><rect x="218.2" y="1973" width="0.1" height="15.0" fill="rgb(243,137,14)" rx="2" ry="2" />
<text  x="221.15" y="1983.5" ></text>
</g>
<g >
<title>c10::FunctionSchema::checkAndNormalizeInputs (11 samples, 0.08%)</title><rect x="1183.6" y="1989" width="1.0" height="15.0" fill="rgb(244,192,27)" rx="2" ry="2" />
<text  x="1186.60" y="1999.5" ></text>
</g>
<g >
<title>TSlinkClustering::ClusterBatch (2,735 samples, 20.04%)</title><rect x="219.7" y="1973" width="236.5" height="15.0" fill="rgb(216,69,19)" rx="2" ry="2" />
<text  x="222.71" y="1983.5" >TSlinkClustering::ClusterBatch</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="218.7" y="933" width="0.1" height="15.0" fill="rgb(250,208,41)" rx="2" ry="2" />
<text  x="221.67" y="943.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::at (5 samples, 0.04%)</title><rect x="183.7" y="1957" width="0.5" height="15.0" fill="rgb(248,11,20)" rx="2" ry="2" />
<text  x="186.74" y="1967.5" ></text>
</g>
<g >
<title>std::future&lt;std::optional&lt;TDbDocument&gt; &gt;::get (4 samples, 0.03%)</title><rect x="199.4" y="1989" width="0.3" height="15.0" fill="rgb(218,60,11)" rx="2" ry="2" />
<text  x="202.39" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1179.9" y="1909" width="0.4" height="15.0" fill="rgb(210,117,3)" rx="2" ry="2" />
<text  x="1182.88" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="1013" width="0.2" height="15.0" fill="rgb(249,116,43)" rx="2" ry="2" />
<text  x="1183.05" y="1023.5" ></text>
</g>
<g >
<title>torch::autograd::VariableHooks::grad_fn (2 samples, 0.01%)</title><rect x="743.8" y="2021" width="0.1" height="15.0" fill="rgb(241,75,51)" rx="2" ry="2" />
<text  x="746.77" y="2031.5" ></text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;float, float&gt;, Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_opposite_op&lt;float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::ArrayWrapper&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, 0&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;float, float&gt; &gt; (90 samples, 0.66%)</title><rect x="448.4" y="1957" width="7.8" height="15.0" fill="rgb(240,85,41)" rx="2" ry="2" />
<text  x="451.45" y="1967.5" ></text>
</g>
<g >
<title>at::native::copy_ (15 samples, 0.11%)</title><rect x="752.9" y="2053" width="1.3" height="15.0" fill="rgb(206,83,34)" rx="2" ry="2" />
<text  x="755.94" y="2063.5" ></text>
</g>
<g >
<title>[libc10.so] (2 samples, 0.01%)</title><rect x="60.3" y="2021" width="0.2" height="15.0" fill="rgb(238,220,27)" rx="2" ry="2" />
<text  x="63.33" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="485" width="0.2" height="15.0" fill="rgb(221,118,12)" rx="2" ry="2" />
<text  x="472.63" y="495.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="517" width="5.5" height="15.0" fill="rgb(226,150,49)" rx="2" ry="2" />
<text  x="67.31" y="527.5" ></text>
</g>
<g >
<title>cfree (19 samples, 0.14%)</title><rect x="648.8" y="2037" width="1.7" height="15.0" fill="rgb(241,102,5)" rx="2" ry="2" />
<text  x="651.82" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="215.3" y="1909" width="0.3" height="15.0" fill="rgb(223,38,41)" rx="2" ry="2" />
<text  x="218.30" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="133" width="0.1" height="15.0" fill="rgb(232,209,51)" rx="2" ry="2" />
<text  x="1183.57" y="143.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.02%)</title><rect x="463.7" y="1989" width="0.2" height="15.0" fill="rgb(239,93,51)" rx="2" ry="2" />
<text  x="466.67" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="773" width="5.5" height="15.0" fill="rgb(232,42,38)" rx="2" ry="2" />
<text  x="67.31" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="218.7" y="1285" width="0.2" height="15.0" fill="rgb(218,73,40)" rx="2" ry="2" />
<text  x="221.67" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1180.3" y="2005" width="0.4" height="15.0" fill="rgb(208,75,54)" rx="2" ry="2" />
<text  x="1183.31" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="821" width="0.2" height="15.0" fill="rgb(216,218,31)" rx="2" ry="2" />
<text  x="1183.49" y="831.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::push_back (3 samples, 0.02%)</title><rect x="463.9" y="2005" width="0.3" height="15.0" fill="rgb(247,33,5)" rx="2" ry="2" />
<text  x="466.93" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (5 samples, 0.04%)</title><rect x="198.9" y="1989" width="0.4" height="15.0" fill="rgb(246,204,39)" rx="2" ry="2" />
<text  x="201.87" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1445" width="5.5" height="15.0" fill="rgb(229,34,49)" rx="2" ry="2" />
<text  x="67.31" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1717" width="0.3" height="15.0" fill="rgb(231,145,49)" rx="2" ry="2" />
<text  x="221.59" y="1727.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (19 samples, 0.14%)</title><rect x="461.8" y="2005" width="1.6" height="15.0" fill="rgb(228,60,29)" rx="2" ry="2" />
<text  x="464.76" y="2015.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="50.6" y="1973" width="0.2" height="15.0" fill="rgb(226,229,0)" rx="2" ry="2" />
<text  x="53.64" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1877" width="0.4" height="15.0" fill="rgb(208,128,18)" rx="2" ry="2" />
<text  x="221.50" y="1887.5" ></text>
</g>
<g >
<title>at::TypeDefault::transpose_int (2 samples, 0.01%)</title><rect x="642.1" y="1989" width="0.1" height="15.0" fill="rgb(236,219,46)" rx="2" ry="2" />
<text  x="645.07" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1909" width="0.4" height="15.0" fill="rgb(251,169,33)" rx="2" ry="2" />
<text  x="221.50" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="517" width="0.2" height="15.0" fill="rgb(250,220,41)" rx="2" ry="2" />
<text  x="472.63" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1157" width="0.2" height="15.0" fill="rgb(223,132,16)" rx="2" ry="2" />
<text  x="1183.49" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1493" width="0.3" height="15.0" fill="rgb(224,111,35)" rx="2" ry="2" />
<text  x="221.59" y="1503.5" ></text>
</g>
<g >
<title>at::native::mm_cpu (3 samples, 0.02%)</title><rect x="644.2" y="2005" width="0.3" height="15.0" fill="rgb(208,104,53)" rx="2" ry="2" />
<text  x="647.23" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="629" width="0.2" height="15.0" fill="rgb(254,89,33)" rx="2" ry="2" />
<text  x="1183.05" y="639.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (27 samples, 0.20%)</title><rect x="47.4" y="2053" width="2.4" height="15.0" fill="rgb(250,219,20)" rx="2" ry="2" />
<text  x="50.45" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (7 samples, 0.05%)</title><rect x="65.4" y="37" width="0.6" height="15.0" fill="rgb(248,116,27)" rx="2" ry="2" />
<text  x="68.43" y="47.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1429" width="5.5" height="15.0" fill="rgb(229,186,52)" rx="2" ry="2" />
<text  x="67.31" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="645" width="0.2" height="15.0" fill="rgb(224,5,19)" rx="2" ry="2" />
<text  x="1183.05" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find@plt (2 samples, 0.01%)</title><rect x="732.4" y="2037" width="0.2" height="15.0" fill="rgb(219,222,4)" rx="2" ry="2" />
<text  x="735.44" y="2047.5" ></text>
</g>
<g >
<title>at::TensorIterator::binary_op (10 samples, 0.07%)</title><rect x="71.1" y="2005" width="0.9" height="15.0" fill="rgb(228,208,37)" rx="2" ry="2" />
<text  x="74.14" y="2015.5" ></text>
</g>
<g >
<title>c10::ivalue::Object::~Object (2 samples, 0.01%)</title><rect x="648.6" y="2037" width="0.2" height="15.0" fill="rgb(232,10,52)" rx="2" ry="2" />
<text  x="651.64" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="469" width="0.1" height="15.0" fill="rgb(254,137,32)" rx="2" ry="2" />
<text  x="1183.57" y="479.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="742.6" y="2021" width="0.2" height="15.0" fill="rgb(250,101,40)" rx="2" ry="2" />
<text  x="745.65" y="2031.5" ></text>
</g>
<g >
<title>c10::KernelFunction::make_boxed_function&lt;&amp;(anonymous namespace)::variable_fallback_kernel&gt; (2 samples, 0.01%)</title><rect x="754.5" y="2053" width="0.2" height="15.0" fill="rgb(239,126,17)" rx="2" ry="2" />
<text  x="757.49" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1941" width="5.6" height="15.0" fill="rgb(209,195,27)" rx="2" ry="2" />
<text  x="67.31" y="1951.5" ></text>
</g>
<g >
<title>ComputeDocumentNasty (2 samples, 0.01%)</title><rect x="465.9" y="1973" width="0.2" height="15.0" fill="rgb(216,156,0)" rx="2" ry="2" />
<text  x="468.91" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1429" width="0.5" height="15.0" fill="rgb(249,186,5)" rx="2" ry="2" />
<text  x="472.55" y="1439.5" ></text>
</g>
<g >
<title>THFloatTensor_addmmImpl (2 samples, 0.01%)</title><rect x="641.5" y="2005" width="0.1" height="15.0" fill="rgb(210,67,26)" rx="2" ry="2" />
<text  x="644.47" y="2015.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (7 samples, 0.05%)</title><rect x="744.3" y="2037" width="0.6" height="15.0" fill="rgb(241,14,5)" rx="2" ry="2" />
<text  x="747.29" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1605" width="5.5" height="15.0" fill="rgb(239,3,34)" rx="2" ry="2" />
<text  x="67.31" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="293" width="0.1" height="15.0" fill="rgb(235,51,27)" rx="2" ry="2" />
<text  x="1183.57" y="303.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1765" width="5.6" height="15.0" fill="rgb(251,11,34)" rx="2" ry="2" />
<text  x="67.31" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13 samples, 0.10%)</title><rect x="468.9" y="1765" width="1.1" height="15.0" fill="rgb(223,51,46)" rx="2" ry="2" />
<text  x="471.86" y="1775.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::dump (33 samples, 0.24%)</title><rect x="458.9" y="2005" width="2.9" height="15.0" fill="rgb(223,47,13)" rx="2" ry="2" />
<text  x="461.91" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1589" width="0.5" height="15.0" fill="rgb(231,218,47)" rx="2" ry="2" />
<text  x="472.55" y="1599.5" ></text>
</g>
<g >
<title>malloc (6 samples, 0.04%)</title><rect x="1161.3" y="2037" width="0.5" height="15.0" fill="rgb(221,4,9)" rx="2" ry="2" />
<text  x="1164.29" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="277" width="0.2" height="15.0" fill="rgb(230,28,26)" rx="2" ry="2" />
<text  x="1183.05" y="287.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (35 samples, 0.26%)</title><rect x="737.7" y="2005" width="3.0" height="15.0" fill="rgb(222,190,3)" rx="2" ry="2" />
<text  x="740.72" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1525" width="0.3" height="15.0" fill="rgb(243,135,7)" rx="2" ry="2" />
<text  x="1182.97" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="533" width="0.2" height="15.0" fill="rgb(223,130,19)" rx="2" ry="2" />
<text  x="1183.05" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1253" width="0.3" height="15.0" fill="rgb(219,92,6)" rx="2" ry="2" />
<text  x="1182.97" y="1263.5" ></text>
</g>
<g >
<title>[libc10.so] (2 samples, 0.01%)</title><rect x="47.3" y="2053" width="0.1" height="15.0" fill="rgb(231,14,47)" rx="2" ry="2" />
<text  x="50.27" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1621" width="5.6" height="15.0" fill="rgb(231,228,27)" rx="2" ry="2" />
<text  x="67.31" y="1631.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.01%)</title><rect x="214.8" y="1925" width="0.2" height="15.0" fill="rgb(214,95,39)" rx="2" ry="2" />
<text  x="217.78" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="853" width="0.2" height="15.0" fill="rgb(252,54,50)" rx="2" ry="2" />
<text  x="1183.05" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="933" width="0.2" height="15.0" fill="rgb(237,161,20)" rx="2" ry="2" />
<text  x="1183.05" y="943.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1317" width="5.5" height="15.0" fill="rgb(235,162,14)" rx="2" ry="2" />
<text  x="67.31" y="1327.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1861" width="5.6" height="15.0" fill="rgb(231,57,23)" rx="2" ry="2" />
<text  x="67.31" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1045" width="0.3" height="15.0" fill="rgb(248,121,46)" rx="2" ry="2" />
<text  x="1182.97" y="1055.5" ></text>
</g>
<g >
<title>at::namedinference::compute_broadcast_outnames (2 samples, 0.01%)</title><rect x="752.7" y="2053" width="0.2" height="15.0" fill="rgb(224,95,25)" rx="2" ry="2" />
<text  x="755.68" y="2063.5" ></text>
</g>
<g >
<title>at::CPUType::add_Tensor (4 samples, 0.03%)</title><rect x="1185.7" y="1909" width="0.3" height="15.0" fill="rgb(246,165,20)" rx="2" ry="2" />
<text  x="1188.68" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="69" width="0.1" height="15.0" fill="rgb(236,164,36)" rx="2" ry="2" />
<text  x="1183.57" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.06%)</title><rect x="468.9" y="1701" width="0.6" height="15.0" fill="rgb(253,229,48)" rx="2" ry="2" />
<text  x="471.86" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="581" width="0.2" height="15.0" fill="rgb(241,113,36)" rx="2" ry="2" />
<text  x="1183.05" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="981" width="0.2" height="15.0" fill="rgb(252,94,35)" rx="2" ry="2" />
<text  x="1183.05" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.2" y="1397" width="0.2" height="15.0" fill="rgb(247,113,45)" rx="2" ry="2" />
<text  x="472.20" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="789" width="0.2" height="15.0" fill="rgb(217,90,43)" rx="2" ry="2" />
<text  x="1183.05" y="799.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="639.7" y="1957" width="0.1" height="15.0" fill="rgb(247,41,39)" rx="2" ry="2" />
<text  x="642.65" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1877" width="5.6" height="15.0" fill="rgb(253,91,26)" rx="2" ry="2" />
<text  x="67.31" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1397" width="0.5" height="15.0" fill="rgb(218,41,9)" rx="2" ry="2" />
<text  x="472.55" y="1407.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (2 samples, 0.01%)</title><rect x="458.7" y="1989" width="0.1" height="15.0" fill="rgb(213,160,8)" rx="2" ry="2" />
<text  x="461.65" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="469.5" y="1061" width="0.3" height="15.0" fill="rgb(206,33,0)" rx="2" ry="2" />
<text  x="472.55" y="1071.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="1149.6" y="2053" width="0.2" height="15.0" fill="rgb(241,158,15)" rx="2" ry="2" />
<text  x="1152.61" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="421" width="0.1" height="15.0" fill="rgb(228,149,5)" rx="2" ry="2" />
<text  x="1183.57" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="357" width="0.2" height="15.0" fill="rgb(243,47,42)" rx="2" ry="2" />
<text  x="1183.05" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="933" width="0.2" height="15.0" fill="rgb(252,84,52)" rx="2" ry="2" />
<text  x="1183.49" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (13 samples, 0.10%)</title><rect x="1175.9" y="2053" width="1.1" height="15.0" fill="rgb(209,47,46)" rx="2" ry="2" />
<text  x="1178.90" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="645" width="0.2" height="15.0" fill="rgb(224,69,48)" rx="2" ry="2" />
<text  x="472.63" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1797" width="0.3" height="15.0" fill="rgb(248,189,49)" rx="2" ry="2" />
<text  x="1183.40" y="1807.5" ></text>
</g>
<g >
<title>main (3,263 samples, 23.91%)</title><rect x="183.0" y="2021" width="282.1" height="15.0" fill="rgb(220,71,14)" rx="2" ry="2" />
<text  x="185.96" y="2031.5" >main</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1701" width="0.3" height="15.0" fill="rgb(224,154,38)" rx="2" ry="2" />
<text  x="1183.40" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.22%)</title><rect x="64.4" y="53" width="2.6" height="15.0" fill="rgb(228,221,11)" rx="2" ry="2" />
<text  x="67.40" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="465.0" y="1829" width="0.1" height="15.0" fill="rgb(219,113,19)" rx="2" ry="2" />
<text  x="467.96" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1285" width="5.5" height="15.0" fill="rgb(218,75,29)" rx="2" ry="2" />
<text  x="67.31" y="1295.5" ></text>
</g>
<g >
<title>TAnnotator::PreprocessText (107 samples, 0.78%)</title><rect x="470.0" y="1957" width="9.2" height="15.0" fill="rgb(248,205,13)" rx="2" ry="2" />
<text  x="472.98" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1637" width="0.5" height="15.0" fill="rgb(206,25,19)" rx="2" ry="2" />
<text  x="472.55" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 0.41%)</title><rect x="64.3" y="101" width="4.9" height="15.0" fill="rgb(218,87,9)" rx="2" ry="2" />
<text  x="67.31" y="111.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (4 samples, 0.03%)</title><rect x="460.0" y="1909" width="0.4" height="15.0" fill="rgb(206,228,15)" rx="2" ry="2" />
<text  x="463.03" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1637" width="0.3" height="15.0" fill="rgb(206,34,13)" rx="2" ry="2" />
<text  x="1183.40" y="1647.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="464.9" y="1957" width="0.2" height="15.0" fill="rgb(221,4,19)" rx="2" ry="2" />
<text  x="467.88" y="1967.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (122 samples, 0.89%)</title><rect x="83.1" y="2021" width="10.5" height="15.0" fill="rgb(228,173,14)" rx="2" ry="2" />
<text  x="86.07" y="2031.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::empty_memory_format (4 samples, 0.03%)</title><rect x="756.1" y="2021" width="0.3" height="15.0" fill="rgb(211,147,44)" rx="2" ry="2" />
<text  x="759.05" y="2031.5" ></text>
</g>
<g >
<title>at::native::as_strided_tensorimpl (6 samples, 0.04%)</title><rect x="642.2" y="1989" width="0.6" height="15.0" fill="rgb(208,138,29)" rx="2" ry="2" />
<text  x="645.24" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1749" width="0.3" height="15.0" fill="rgb(243,54,31)" rx="2" ry="2" />
<text  x="1182.97" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="917" width="0.2" height="15.0" fill="rgb(233,103,5)" rx="2" ry="2" />
<text  x="472.63" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="565" width="0.1" height="15.0" fill="rgb(225,191,47)" rx="2" ry="2" />
<text  x="1183.57" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.4" y="1365" width="0.1" height="15.0" fill="rgb(225,3,51)" rx="2" ry="2" />
<text  x="472.37" y="1375.5" ></text>
</g>
<g >
<title>tg::from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="467.2" y="1941" width="0.2" height="15.0" fill="rgb(252,26,9)" rx="2" ry="2" />
<text  x="470.21" y="1951.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (2 samples, 0.01%)</title><rect x="69.7" y="53" width="0.1" height="15.0" fill="rgb(211,44,19)" rx="2" ry="2" />
<text  x="72.67" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1013" width="0.3" height="15.0" fill="rgb(224,181,52)" rx="2" ry="2" />
<text  x="472.55" y="1023.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="581" width="5.5" height="15.0" fill="rgb(221,47,1)" rx="2" ry="2" />
<text  x="67.31" y="591.5" ></text>
</g>
<g >
<title>[unknown] (43 samples, 0.32%)</title><rect x="1183.4" y="2021" width="3.7" height="15.0" fill="rgb(234,192,46)" rx="2" ry="2" />
<text  x="1186.43" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1285" width="0.2" height="15.0" fill="rgb(233,66,27)" rx="2" ry="2" />
<text  x="1183.49" y="1295.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (4 samples, 0.03%)</title><rect x="74.5" y="2005" width="0.4" height="15.0" fill="rgb(213,218,48)" rx="2" ry="2" />
<text  x="77.51" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="469.2" y="1413" width="0.3" height="15.0" fill="rgb(223,197,7)" rx="2" ry="2" />
<text  x="472.20" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (8,014 samples, 58.73%)</title><rect x="51.2" y="2053" width="693.0" height="15.0" fill="rgb(233,71,27)" rx="2" ry="2" />
<text  x="54.16" y="2063.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1621" width="0.5" height="15.0" fill="rgb(254,67,17)" rx="2" ry="2" />
<text  x="472.55" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1179.9" y="1877" width="0.4" height="15.0" fill="rgb(233,125,40)" rx="2" ry="2" />
<text  x="1182.88" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="85" width="0.1" height="15.0" fill="rgb(223,146,12)" rx="2" ry="2" />
<text  x="1183.57" y="95.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (19 samples, 0.14%)</title><rect x="1052.6" y="2053" width="1.6" height="15.0" fill="rgb(251,65,50)" rx="2" ry="2" />
<text  x="1055.59" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (5 samples, 0.04%)</title><rect x="136.2" y="2021" width="0.4" height="15.0" fill="rgb(214,21,2)" rx="2" ry="2" />
<text  x="139.17" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="501" width="0.2" height="15.0" fill="rgb(239,65,42)" rx="2" ry="2" />
<text  x="472.63" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="677" width="0.2" height="15.0" fill="rgb(253,164,52)" rx="2" ry="2" />
<text  x="472.63" y="687.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::add (40 samples, 0.29%)</title><rect x="189.0" y="1925" width="3.5" height="15.0" fill="rgb(229,9,20)" rx="2" ry="2" />
<text  x="192.01" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_string (143 samples, 1.05%)</title><rect x="186.4" y="1941" width="12.4" height="15.0" fill="rgb(219,128,4)" rx="2" ry="2" />
<text  x="189.42" y="1951.5" ></text>
</g>
<g >
<title>torch::autograd::generated::MmBackward::~MmBackward (2 samples, 0.01%)</title><rect x="742.6" y="2037" width="0.2" height="15.0" fill="rgb(251,63,0)" rx="2" ry="2" />
<text  x="745.65" y="2047.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (2 samples, 0.01%)</title><rect x="465.7" y="1989" width="0.1" height="15.0" fill="rgb(213,142,25)" rx="2" ry="2" />
<text  x="468.66" y="1999.5" ></text>
</g>
<g >
<title>tableCache (2 samples, 0.01%)</title><rect x="1189.5" y="2053" width="0.2" height="15.0" fill="rgb(243,34,15)" rx="2" ry="2" />
<text  x="1192.48" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector&lt;long const*, void&gt; (3 samples, 0.02%)</title><rect x="484.8" y="1877" width="0.2" height="15.0" fill="rgb(208,103,27)" rx="2" ry="2" />
<text  x="487.77" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1269" width="0.3" height="15.0" fill="rgb(221,107,38)" rx="2" ry="2" />
<text  x="472.55" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="453" width="0.2" height="15.0" fill="rgb(210,30,47)" rx="2" ry="2" />
<text  x="1183.05" y="463.5" ></text>
</g>
<g >
<title>tgnews (13,645 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(238,201,23)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >tgnews</text>
</g>
<g >
<title>mkl_serv_lsame (3 samples, 0.02%)</title><rect x="677.0" y="2037" width="0.3" height="15.0" fill="rgb(238,26,42)" rx="2" ry="2" />
<text  x="680.01" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="218.7" y="1269" width="0.2" height="15.0" fill="rgb(251,137,19)" rx="2" ry="2" />
<text  x="221.67" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1317" width="0.3" height="15.0" fill="rgb(252,169,13)" rx="2" ry="2" />
<text  x="1182.97" y="1327.5" ></text>
</g>
<g >
<title>mkl_blas_avx512_xsgemv (17 samples, 0.12%)</title><rect x="675.3" y="2021" width="1.4" height="15.0" fill="rgb(224,223,48)" rx="2" ry="2" />
<text  x="678.28" y="2031.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nlohmann::detail::json_ref&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (2 samples, 0.01%)</title><rect x="458.5" y="1973" width="0.2" height="15.0" fill="rgb(229,69,46)" rx="2" ry="2" />
<text  x="461.48" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.1" y="1573" width="0.4" height="15.0" fill="rgb(250,176,37)" rx="2" ry="2" />
<text  x="472.11" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1125" width="0.2" height="15.0" fill="rgb(243,0,52)" rx="2" ry="2" />
<text  x="1183.49" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="965" width="0.2" height="15.0" fill="rgb(231,59,5)" rx="2" ry="2" />
<text  x="1183.49" y="975.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (11 samples, 0.08%)</title><rect x="813.2" y="2053" width="1.0" height="15.0" fill="rgb(206,68,1)" rx="2" ry="2" />
<text  x="816.21" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1557" width="0.3" height="15.0" fill="rgb(238,227,41)" rx="2" ry="2" />
<text  x="1182.97" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1733" width="0.3" height="15.0" fill="rgb(218,51,33)" rx="2" ry="2" />
<text  x="221.59" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (47 samples, 0.34%)</title><rect x="64.3" y="85" width="4.1" height="15.0" fill="rgb(216,31,9)" rx="2" ry="2" />
<text  x="67.31" y="95.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (9 samples, 0.07%)</title><rect x="68.4" y="85" width="0.8" height="15.0" fill="rgb(254,3,49)" rx="2" ry="2" />
<text  x="71.37" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.1" y="1605" width="0.4" height="15.0" fill="rgb(219,148,37)" rx="2" ry="2" />
<text  x="472.11" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1349" width="0.3" height="15.0" fill="rgb(226,69,2)" rx="2" ry="2" />
<text  x="221.59" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1845" width="0.4" height="15.0" fill="rgb(237,217,22)" rx="2" ry="2" />
<text  x="221.50" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="149" width="5.5" height="15.0" fill="rgb(209,187,11)" rx="2" ry="2" />
<text  x="67.31" y="159.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (17 samples, 0.12%)</title><rect x="454.8" y="1941" width="1.4" height="15.0" fill="rgb(211,170,14)" rx="2" ry="2" />
<text  x="457.76" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number (32 samples, 0.23%)</title><rect x="1136.8" y="2053" width="2.8" height="15.0" fill="rgb(233,164,26)" rx="2" ry="2" />
<text  x="1139.82" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1269" width="0.2" height="15.0" fill="rgb(209,93,31)" rx="2" ry="2" />
<text  x="1183.49" y="1279.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (514 samples, 3.77%)</title><rect x="138.5" y="1989" width="44.5" height="15.0" fill="rgb(209,200,30)" rx="2" ry="2" />
<text  x="141.51" y="1999.5" >Eige..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1669" width="0.3" height="15.0" fill="rgb(205,124,31)" rx="2" ry="2" />
<text  x="1183.40" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1509" width="0.3" height="15.0" fill="rgb(252,96,52)" rx="2" ry="2" />
<text  x="221.59" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="677" width="5.5" height="15.0" fill="rgb(234,66,48)" rx="2" ry="2" />
<text  x="67.31" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (16 samples, 0.12%)</title><rect x="205.2" y="1925" width="1.4" height="15.0" fill="rgb(246,72,32)" rx="2" ry="2" />
<text  x="208.18" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Model::predict (8 samples, 0.06%)</title><rect x="79.0" y="2021" width="0.7" height="15.0" fill="rgb(211,135,17)" rx="2" ry="2" />
<text  x="82.01" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1733" width="0.3" height="15.0" fill="rgb(223,27,9)" rx="2" ry="2" />
<text  x="1183.40" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="743.9" y="2021" width="0.2" height="15.0" fill="rgb(230,118,47)" rx="2" ry="2" />
<text  x="746.94" y="2031.5" ></text>
</g>
<g >
<title>all (13,645 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(235,8,48)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.1" y="117" width="0.2" height="15.0" fill="rgb(247,34,52)" rx="2" ry="2" />
<text  x="1183.14" y="127.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (4 samples, 0.03%)</title><rect x="1183.0" y="2053" width="0.3" height="15.0" fill="rgb(246,227,1)" rx="2" ry="2" />
<text  x="1186.00" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="218.7" y="1205" width="0.2" height="15.0" fill="rgb(254,144,37)" rx="2" ry="2" />
<text  x="221.67" y="1215.5" ></text>
</g>
<g >
<title>torch::jit::GraphExecutorImplBase::run (23 samples, 0.17%)</title><rect x="1184.7" y="1989" width="2.0" height="15.0" fill="rgb(220,138,19)" rx="2" ry="2" />
<text  x="1187.72" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1045" width="0.3" height="15.0" fill="rgb(212,166,3)" rx="2" ry="2" />
<text  x="472.55" y="1055.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::str[abi:cxx11] (3 samples, 0.02%)</title><rect x="678.5" y="2037" width="0.2" height="15.0" fill="rgb(225,27,32)" rx="2" ry="2" />
<text  x="681.48" y="2047.5" ></text>
</g>
<g >
<title>torch::jit::InterpreterStateImpl::runImpl (16 samples, 0.12%)</title><rect x="1185.2" y="1957" width="1.4" height="15.0" fill="rgb(220,178,12)" rx="2" ry="2" />
<text  x="1188.24" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1317" width="0.2" height="15.0" fill="rgb(233,187,33)" rx="2" ry="2" />
<text  x="1183.49" y="1327.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxedWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (9 samples, 0.07%)</title><rect x="489.2" y="1845" width="0.8" height="15.0" fill="rgb(217,81,21)" rx="2" ry="2" />
<text  x="492.18" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt;::vector (2 samples, 0.01%)</title><rect x="457.7" y="1989" width="0.2" height="15.0" fill="rgb(217,33,44)" rx="2" ry="2" />
<text  x="460.70" y="1999.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (406 samples, 2.98%)</title><rect x="694.0" y="2037" width="35.1" height="15.0" fill="rgb(250,152,16)" rx="2" ry="2" />
<text  x="696.96" y="2047.5" >on..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1605" width="0.3" height="15.0" fill="rgb(225,8,53)" rx="2" ry="2" />
<text  x="221.59" y="1615.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (2 samples, 0.01%)</title><rect x="64.8" y="37" width="0.2" height="15.0" fill="rgb(207,144,10)" rx="2" ry="2" />
<text  x="67.83" y="47.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;torch::autograd::generated::AddBackward0*, void  (2 samples, 0.01%)</title><rect x="730.5" y="2037" width="0.1" height="15.0" fill="rgb(253,31,31)" rx="2" ry="2" />
<text  x="733.45" y="2047.5" ></text>
</g>
<g >
<title>c10::StorageImpl::~StorageImpl (3 samples, 0.02%)</title><rect x="641.0" y="2037" width="0.3" height="15.0" fill="rgb(246,148,6)" rx="2" ry="2" />
<text  x="644.03" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="837" width="5.5" height="15.0" fill="rgb(234,106,1)" rx="2" ry="2" />
<text  x="67.31" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (46 samples, 0.34%)</title><rect x="474.9" y="1925" width="4.0" height="15.0" fill="rgb(243,48,11)" rx="2" ry="2" />
<text  x="477.91" y="1935.5" ></text>
</g>
<g >
<title>RunFasttextClf (9 samples, 0.07%)</title><rect x="466.2" y="1941" width="0.8" height="15.0" fill="rgb(216,158,8)" rx="2" ry="2" />
<text  x="469.17" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (28 samples, 0.21%)</title><rect x="651.7" y="2037" width="2.4" height="15.0" fill="rgb(230,201,18)" rx="2" ry="2" />
<text  x="654.67" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1861" width="0.4" height="15.0" fill="rgb(205,184,11)" rx="2" ry="2" />
<text  x="221.50" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1365" width="0.3" height="15.0" fill="rgb(246,51,33)" rx="2" ry="2" />
<text  x="1182.97" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="949" width="0.2" height="15.0" fill="rgb(219,77,46)" rx="2" ry="2" />
<text  x="1183.49" y="959.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="645" width="5.5" height="15.0" fill="rgb(215,0,2)" rx="2" ry="2" />
<text  x="67.31" y="655.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (9 samples, 0.07%)</title><rect x="456.5" y="1989" width="0.8" height="15.0" fill="rgb(209,154,8)" rx="2" ry="2" />
<text  x="459.49" y="1999.5" ></text>
</g>
<g >
<title>at::CPUType::set__source_Storage_storage_offset (6 samples, 0.04%)</title><rect x="489.2" y="1797" width="0.5" height="15.0" fill="rgb(208,221,22)" rx="2" ry="2" />
<text  x="492.18" y="1807.5" ></text>
</g>
<g >
<title>at::TypeDefault::slice_Tensor (5 samples, 0.04%)</title><rect x="484.6" y="1893" width="0.4" height="15.0" fill="rgb(244,53,18)" rx="2" ry="2" />
<text  x="487.59" y="1903.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="730.2" y="2037" width="0.3" height="15.0" fill="rgb(214,8,16)" rx="2" ry="2" />
<text  x="733.19" y="2047.5" ></text>
</g>
<g >
<title>c10::DefaultCPUAllocator::allocate (2 samples, 0.01%)</title><rect x="492.8" y="1893" width="0.2" height="15.0" fill="rgb(245,36,38)" rx="2" ry="2" />
<text  x="495.81" y="1903.5" ></text>
</g>
<g >
<title>torch::jit::InterpreterState::run (23 samples, 0.17%)</title><rect x="1184.7" y="1973" width="2.0" height="15.0" fill="rgb(211,28,35)" rx="2" ry="2" />
<text  x="1187.72" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="373" width="5.5" height="15.0" fill="rgb(235,6,35)" rx="2" ry="2" />
<text  x="67.31" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14 samples, 0.10%)</title><rect x="468.8" y="1781" width="1.2" height="15.0" fill="rgb(223,194,9)" rx="2" ry="2" />
<text  x="471.77" y="1791.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (10 samples, 0.07%)</title><rect x="78.1" y="2021" width="0.9" height="15.0" fill="rgb(222,71,10)" rx="2" ry="2" />
<text  x="81.15" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1221" width="5.5" height="15.0" fill="rgb(210,11,6)" rx="2" ry="2" />
<text  x="67.31" y="1231.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.04%)</title><rect x="61.3" y="1973" width="0.4" height="15.0" fill="rgb(228,61,11)" rx="2" ry="2" />
<text  x="64.28" y="1983.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (4 samples, 0.03%)</title><rect x="188.7" y="1925" width="0.3" height="15.0" fill="rgb(246,33,8)" rx="2" ry="2" />
<text  x="191.66" y="1935.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (6 samples, 0.04%)</title><rect x="71.2" y="1989" width="0.5" height="15.0" fill="rgb(237,176,54)" rx="2" ry="2" />
<text  x="74.23" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="469.0" y="1621" width="0.5" height="15.0" fill="rgb(223,154,18)" rx="2" ry="2" />
<text  x="472.03" y="1631.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (14 samples, 0.10%)</title><rect x="81.5" y="2021" width="1.2" height="15.0" fill="rgb(254,19,1)" rx="2" ry="2" />
<text  x="84.52" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1461" width="0.2" height="15.0" fill="rgb(218,103,33)" rx="2" ry="2" />
<text  x="1183.49" y="1471.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::(anonymous namespace)::copy_ (10 samples, 0.07%)</title><rect x="486.8" y="1909" width="0.9" height="15.0" fill="rgb(220,131,19)" rx="2" ry="2" />
<text  x="489.84" y="1919.5" ></text>
</g>
<g >
<title>TAnnotator::AnnotateDocument (2,012 samples, 14.75%)</title><rect x="466.1" y="1973" width="174.0" height="15.0" fill="rgb(250,75,15)" rx="2" ry="2" />
<text  x="469.09" y="1983.5" >TAnnotator::AnnotateDo..</text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1061" width="5.5" height="15.0" fill="rgb(247,36,14)" rx="2" ry="2" />
<text  x="67.31" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1109" width="0.3" height="15.0" fill="rgb(232,41,11)" rx="2" ry="2" />
<text  x="1182.97" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1733" width="5.6" height="15.0" fill="rgb(222,132,10)" rx="2" ry="2" />
<text  x="67.31" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.4" y="1381" width="0.1" height="15.0" fill="rgb(243,83,47)" rx="2" ry="2" />
<text  x="472.37" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1141" width="0.2" height="15.0" fill="rgb(220,30,30)" rx="2" ry="2" />
<text  x="1183.49" y="1151.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_float (8 samples, 0.06%)</title><rect x="460.6" y="1909" width="0.6" height="15.0" fill="rgb(205,211,26)" rx="2" ry="2" />
<text  x="463.55" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (53 samples, 0.39%)</title><rect x="736.2" y="2037" width="4.5" height="15.0" fill="rgb(247,44,10)" rx="2" ry="2" />
<text  x="739.16" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (4 samples, 0.03%)</title><rect x="1177.0" y="2053" width="0.4" height="15.0" fill="rgb(247,69,44)" rx="2" ry="2" />
<text  x="1180.03" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="709" width="5.5" height="15.0" fill="rgb(222,98,21)" rx="2" ry="2" />
<text  x="67.31" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="741" width="0.2" height="15.0" fill="rgb(223,179,3)" rx="2" ry="2" />
<text  x="1183.49" y="751.5" ></text>
</g>
<g >
<title>c10::checked_convert&lt;float, long&gt; (3 samples, 0.02%)</title><rect x="754.9" y="2053" width="0.3" height="15.0" fill="rgb(248,147,52)" rx="2" ry="2" />
<text  x="757.93" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (2 samples, 0.01%)</title><rect x="1187.5" y="2053" width="0.2" height="15.0" fill="rgb(225,191,15)" rx="2" ry="2" />
<text  x="1190.49" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::slice_Tensor (8 samples, 0.06%)</title><rect x="485.3" y="1893" width="0.7" height="15.0" fill="rgb(225,215,11)" rx="2" ry="2" />
<text  x="488.29" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (359 samples, 2.63%)</title><rect x="814.2" y="2053" width="31.0" height="15.0" fill="rgb(215,140,5)" rx="2" ry="2" />
<text  x="817.16" y="2063.5" >fa..</text>
</g>
<g >
<title>[unknown] (7 samples, 0.05%)</title><rect x="742.9" y="2021" width="0.6" height="15.0" fill="rgb(237,3,33)" rx="2" ry="2" />
<text  x="745.91" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16 samples, 0.12%)</title><rect x="468.6" y="1893" width="1.4" height="15.0" fill="rgb(236,52,51)" rx="2" ry="2" />
<text  x="471.60" y="1903.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (3 samples, 0.02%)</title><rect x="68.0" y="53" width="0.3" height="15.0" fill="rgb(219,38,49)" rx="2" ry="2" />
<text  x="71.03" y="63.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="464.9" y="1861" width="0.2" height="15.0" fill="rgb(221,1,41)" rx="2" ry="2" />
<text  x="467.88" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1749" width="0.3" height="15.0" fill="rgb(206,151,8)" rx="2" ry="2" />
<text  x="1183.40" y="1759.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (5 samples, 0.04%)</title><rect x="637.7" y="1941" width="0.4" height="15.0" fill="rgb(205,36,49)" rx="2" ry="2" />
<text  x="640.66" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="37" width="0.1" height="15.0" fill="rgb(254,11,0)" rx="2" ry="2" />
<text  x="1183.57" y="47.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (78 samples, 0.57%)</title><rect x="51.2" y="2037" width="6.7" height="15.0" fill="rgb(242,30,4)" rx="2" ry="2" />
<text  x="54.16" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1189" width="5.5" height="15.0" fill="rgb(245,112,5)" rx="2" ry="2" />
<text  x="67.31" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1925" width="0.4" height="15.0" fill="rgb(231,51,42)" rx="2" ry="2" />
<text  x="221.50" y="1935.5" ></text>
</g>
<g >
<title>c10::FunctionSchema::checkArg (10 samples, 0.07%)</title><rect x="1183.7" y="1973" width="0.9" height="15.0" fill="rgb(219,38,2)" rx="2" ry="2" />
<text  x="1186.69" y="1983.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::clear (3 samples, 0.02%)</title><rect x="1015.9" y="2053" width="0.3" height="15.0" fill="rgb(211,67,31)" rx="2" ry="2" />
<text  x="1018.92" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::impl::grad_accumulator (2 samples, 0.01%)</title><rect x="644.3" y="1989" width="0.2" height="15.0" fill="rgb(250,164,46)" rx="2" ry="2" />
<text  x="647.32" y="1999.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::operator (41 samples, 0.30%)</title><rect x="1183.6" y="2005" width="3.5" height="15.0" fill="rgb(223,140,23)" rx="2" ry="2" />
<text  x="1186.60" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="469.5" y="1189" width="0.3" height="15.0" fill="rgb(254,216,36)" rx="2" ry="2" />
<text  x="472.55" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="1150.2" y="2037" width="0.2" height="15.0" fill="rgb(215,38,32)" rx="2" ry="2" />
<text  x="1153.22" y="2047.5" ></text>
</g>
<g >
<title>.omp_outlined. (514 samples, 3.77%)</title><rect x="138.5" y="2005" width="44.5" height="15.0" fill="rgb(239,47,29)" rx="2" ry="2" />
<text  x="141.51" y="2015.5" >.omp..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="149" width="0.1" height="15.0" fill="rgb(249,26,42)" rx="2" ry="2" />
<text  x="1183.57" y="159.5" ></text>
</g>
<g >
<title>TNewsCluster::Summarize (18 samples, 0.13%)</title><rect x="218.0" y="1989" width="1.5" height="15.0" fill="rgb(239,64,26)" rx="2" ry="2" />
<text  x="220.98" y="1999.5" ></text>
</g>
<g >
<title>torch::zeros (16 samples, 0.12%)</title><rect x="490.5" y="1925" width="1.4" height="15.0" fill="rgb(241,229,11)" rx="2" ry="2" />
<text  x="493.47" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1109" width="5.5" height="15.0" fill="rgb(213,41,2)" rx="2" ry="2" />
<text  x="67.31" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="469.0" y="1669" width="0.5" height="15.0" fill="rgb(224,18,33)" rx="2" ry="2" />
<text  x="472.03" y="1679.5" ></text>
</g>
<g >
<title>mkl_blas__sgemm (3 samples, 0.02%)</title><rect x="646.0" y="2005" width="0.2" height="15.0" fill="rgb(221,172,34)" rx="2" ry="2" />
<text  x="648.96" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1493" width="5.5" height="15.0" fill="rgb(244,221,32)" rx="2" ry="2" />
<text  x="67.31" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.2" y="1349" width="0.2" height="15.0" fill="rgb(205,225,3)" rx="2" ry="2" />
<text  x="472.20" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1557" width="0.3" height="15.0" fill="rgb(240,193,42)" rx="2" ry="2" />
<text  x="1183.40" y="1567.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (6 samples, 0.04%)</title><rect x="212.3" y="1941" width="0.5" height="15.0" fill="rgb(213,187,24)" rx="2" ry="2" />
<text  x="215.27" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (753 samples, 5.52%)</title><rect x="1071.7" y="2053" width="65.1" height="15.0" fill="rgb(239,8,23)" rx="2" ry="2" />
<text  x="1074.70" y="2063.5" >onmt::u..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_get_insert_unique_pos (2 samples, 0.01%)</title><rect x="215.8" y="1893" width="0.2" height="15.0" fill="rgb(227,72,53)" rx="2" ry="2" />
<text  x="218.82" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1829" width="0.3" height="15.0" fill="rgb(214,147,3)" rx="2" ry="2" />
<text  x="1183.40" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="741" width="5.5" height="15.0" fill="rgb(217,121,51)" rx="2" ry="2" />
<text  x="67.31" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1909" width="0.3" height="15.0" fill="rgb(214,203,30)" rx="2" ry="2" />
<text  x="1183.40" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1653" width="5.6" height="15.0" fill="rgb(234,81,9)" rx="2" ry="2" />
<text  x="67.31" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1179.7" y="2005" width="0.6" height="15.0" fill="rgb(232,129,48)" rx="2" ry="2" />
<text  x="1182.71" y="2015.5" ></text>
</g>
<g >
<title>at::native::fill_out (2 samples, 0.01%)</title><rect x="69.7" y="69" width="0.1" height="15.0" fill="rgb(254,226,47)" rx="2" ry="2" />
<text  x="72.67" y="79.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1669" width="5.6" height="15.0" fill="rgb(207,133,10)" rx="2" ry="2" />
<text  x="67.31" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="341" width="0.1" height="15.0" fill="rgb(250,109,33)" rx="2" ry="2" />
<text  x="1183.57" y="351.5" ></text>
</g>
<g >
<title>TEmbedder::CalcEmbedding (1,839 samples, 13.48%)</title><rect x="479.2" y="1957" width="159.1" height="15.0" fill="rgb(248,89,14)" rx="2" ry="2" />
<text  x="482.23" y="1967.5" >TEmbedder::CalcEmbed..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="709" width="0.2" height="15.0" fill="rgb(220,37,23)" rx="2" ry="2" />
<text  x="472.63" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="421" width="0.2" height="15.0" fill="rgb(230,82,11)" rx="2" ry="2" />
<text  x="1183.05" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10 samples, 0.07%)</title><rect x="215.1" y="1925" width="0.9" height="15.0" fill="rgb(207,158,13)" rx="2" ry="2" />
<text  x="218.13" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1877" width="0.3" height="15.0" fill="rgb(212,58,34)" rx="2" ry="2" />
<text  x="1183.40" y="1887.5" ></text>
</g>
<g >
<title>torch::autograd::impl::set_gradient_edge (2 samples, 0.01%)</title><rect x="743.2" y="1973" width="0.1" height="15.0" fill="rgb(224,53,49)" rx="2" ry="2" />
<text  x="746.17" y="1983.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::~DifferentiableViewMeta (4 samples, 0.03%)</title><rect x="646.4" y="2005" width="0.3" height="15.0" fill="rgb(205,9,2)" rx="2" ry="2" />
<text  x="649.40" y="2015.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (4 samples, 0.03%)</title><rect x="1181.6" y="2053" width="0.4" height="15.0" fill="rgb(230,104,42)" rx="2" ry="2" />
<text  x="1184.61" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::impl::gradient_edge (5 samples, 0.04%)</title><rect x="743.5" y="2037" width="0.4" height="15.0" fill="rgb(216,141,35)" rx="2" ry="2" />
<text  x="746.51" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="469" width="0.2" height="15.0" fill="rgb(232,63,1)" rx="2" ry="2" />
<text  x="1183.05" y="479.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::ScoreUrl (58 samples, 0.43%)</title><rect x="202.8" y="1941" width="5.1" height="15.0" fill="rgb(246,46,44)" rx="2" ry="2" />
<text  x="205.85" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1685" width="0.3" height="15.0" fill="rgb(220,94,26)" rx="2" ry="2" />
<text  x="1182.97" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1541" width="0.2" height="15.0" fill="rgb(224,148,14)" rx="2" ry="2" />
<text  x="1183.49" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="949" width="0.2" height="15.0" fill="rgb(226,215,53)" rx="2" ry="2" />
<text  x="1183.05" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.1" y="1557" width="0.4" height="15.0" fill="rgb(214,83,43)" rx="2" ry="2" />
<text  x="472.11" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="743.9" y="1989" width="0.2" height="15.0" fill="rgb(206,159,17)" rx="2" ry="2" />
<text  x="746.94" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.03%)</title><rect x="741.4" y="2021" width="0.4" height="15.0" fill="rgb(252,181,27)" rx="2" ry="2" />
<text  x="744.44" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="709" width="0.2" height="15.0" fill="rgb(217,62,31)" rx="2" ry="2" />
<text  x="1183.49" y="719.5" ></text>
</g>
<g >
<title>c10::detail::make_boxed_from_unboxed_functor&lt;c10::detail::WrapKernelFunction_&lt;long  (3 samples, 0.02%)</title><rect x="76.8" y="2021" width="0.2" height="15.0" fill="rgb(238,95,10)" rx="2" ry="2" />
<text  x="79.76" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1701" width="0.3" height="15.0" fill="rgb(213,40,20)" rx="2" ry="2" />
<text  x="221.59" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="853" width="5.5" height="15.0" fill="rgb(216,177,54)" rx="2" ry="2" />
<text  x="67.31" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="485" width="0.1" height="15.0" fill="rgb(243,33,17)" rx="2" ry="2" />
<text  x="1183.57" y="495.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (134 samples, 0.98%)</title><rect x="624.8" y="1941" width="11.6" height="15.0" fill="rgb(215,209,47)" rx="2" ry="2" />
<text  x="627.78" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="213" width="0.2" height="15.0" fill="rgb(210,163,48)" rx="2" ry="2" />
<text  x="1183.05" y="223.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (4 samples, 0.03%)</title><rect x="68.0" y="69" width="0.4" height="15.0" fill="rgb(249,101,17)" rx="2" ry="2" />
<text  x="71.03" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1573" width="0.5" height="15.0" fill="rgb(228,37,6)" rx="2" ry="2" />
<text  x="472.55" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="885" width="0.2" height="15.0" fill="rgb(219,117,50)" rx="2" ry="2" />
<text  x="1183.05" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="885" width="0.2" height="15.0" fill="rgb(244,3,19)" rx="2" ry="2" />
<text  x="1183.49" y="895.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::GetCountryShare (2 samples, 0.01%)</title><rect x="217.0" y="1957" width="0.2" height="15.0" fill="rgb(214,229,19)" rx="2" ry="2" />
<text  x="220.03" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1813" width="0.3" height="15.0" fill="rgb(217,52,2)" rx="2" ry="2" />
<text  x="1182.97" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1653" width="0.3" height="15.0" fill="rgb(236,74,16)" rx="2" ry="2" />
<text  x="1182.97" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (18 samples, 0.13%)</title><rect x="468.4" y="1941" width="1.6" height="15.0" fill="rgb(232,53,11)" rx="2" ry="2" />
<text  x="471.42" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="741" width="0.2" height="15.0" fill="rgb(222,21,39)" rx="2" ry="2" />
<text  x="1183.05" y="751.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1381" width="5.5" height="15.0" fill="rgb(222,21,47)" rx="2" ry="2" />
<text  x="67.31" y="1391.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TNewsCluster*, std::vector&lt;TNewsCluster, std::allocator&lt;TNewsCluster&gt; &gt; &gt;, TNewsCluster*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (3 samples, 0.02%)</title><rect x="457.3" y="1989" width="0.2" height="15.0" fill="rgb(222,132,40)" rx="2" ry="2" />
<text  x="460.27" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1445" width="0.2" height="15.0" fill="rgb(245,156,41)" rx="2" ry="2" />
<text  x="1183.49" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="181" width="0.1" height="15.0" fill="rgb(251,146,15)" rx="2" ry="2" />
<text  x="1183.57" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="458.0" y="1973" width="0.2" height="15.0" fill="rgb(251,183,47)" rx="2" ry="2" />
<text  x="461.05" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="949" width="0.2" height="15.0" fill="rgb(224,31,18)" rx="2" ry="2" />
<text  x="472.63" y="959.5" ></text>
</g>
<g >
<title>Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;, Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt; (2 samples, 0.01%)</title><rect x="218.2" y="1925" width="0.1" height="15.0" fill="rgb(242,11,22)" rx="2" ry="2" />
<text  x="221.15" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="837" width="0.2" height="15.0" fill="rgb(226,147,37)" rx="2" ry="2" />
<text  x="1183.05" y="847.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::unsqueeze (2 samples, 0.01%)</title><rect x="742.0" y="2037" width="0.2" height="15.0" fill="rgb(214,105,10)" rx="2" ry="2" />
<text  x="745.04" y="2047.5" ></text>
</g>
<g >
<title>at::TensorIterator::~TensorIterator (3 samples, 0.02%)</title><rect x="647.5" y="2005" width="0.3" height="15.0" fill="rgb(251,105,35)" rx="2" ry="2" />
<text  x="650.52" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="773" width="0.2" height="15.0" fill="rgb(221,162,38)" rx="2" ry="2" />
<text  x="472.63" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="218.7" y="901" width="0.1" height="15.0" fill="rgb(222,110,0)" rx="2" ry="2" />
<text  x="221.67" y="911.5" ></text>
</g>
<g >
<title>at::Tensor::unsqueeze (2 samples, 0.01%)</title><rect x="484.0" y="1925" width="0.2" height="15.0" fill="rgb(252,6,33)" rx="2" ry="2" />
<text  x="486.99" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1829" width="5.6" height="15.0" fill="rgb(212,66,10)" rx="2" ry="2" />
<text  x="67.31" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1685" width="0.3" height="15.0" fill="rgb(228,158,25)" rx="2" ry="2" />
<text  x="1183.40" y="1695.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::CalcEmbedding (143 samples, 1.05%)</title><rect x="479.5" y="1941" width="12.4" height="15.0" fill="rgb(217,114,1)" rx="2" ry="2" />
<text  x="482.49" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="869" width="5.5" height="15.0" fill="rgb(249,47,37)" rx="2" ry="2" />
<text  x="67.31" y="879.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.73%)</title><rect x="61.7" y="1973" width="8.7" height="15.0" fill="rgb(246,208,8)" rx="2" ry="2" />
<text  x="64.71" y="1983.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (56 samples, 0.41%)</title><rect x="1066.9" y="2053" width="4.8" height="15.0" fill="rgb(240,162,45)" rx="2" ry="2" />
<text  x="1069.85" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (2 samples, 0.01%)</title><rect x="186.0" y="1925" width="0.2" height="15.0" fill="rgb(216,104,37)" rx="2" ry="2" />
<text  x="188.98" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (6 samples, 0.04%)</title><rect x="681.3" y="2021" width="0.6" height="15.0" fill="rgb(225,77,11)" rx="2" ry="2" />
<text  x="684.33" y="2031.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (10 samples, 0.07%)</title><rect x="621.5" y="1941" width="0.9" height="15.0" fill="rgb(246,34,17)" rx="2" ry="2" />
<text  x="624.49" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::get_lower (18 samples, 0.13%)</title><rect x="99.9" y="2021" width="1.6" height="15.0" fill="rgb(209,120,46)" rx="2" ry="2" />
<text  x="102.94" y="2031.5" ></text>
</g>
<g >
<title>__pthread_once_slow (2,026 samples, 14.85%)</title><rect x="465.1" y="2037" width="175.2" height="15.0" fill="rgb(205,138,8)" rx="2" ry="2" />
<text  x="468.14" y="2047.5" >__pthread_once_slow</text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::requires_grad (4 samples, 0.03%)</title><rect x="741.4" y="2037" width="0.4" height="15.0" fill="rgb(210,74,42)" rx="2" ry="2" />
<text  x="744.44" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1589" width="5.5" height="15.0" fill="rgb(241,174,48)" rx="2" ry="2" />
<text  x="67.31" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="453" width="5.5" height="15.0" fill="rgb(215,153,8)" rx="2" ry="2" />
<text  x="67.31" y="463.5" ></text>
</g>
<g >
<title>malloc (8 samples, 0.06%)</title><rect x="692.0" y="2021" width="0.7" height="15.0" fill="rgb(229,156,7)" rx="2" ry="2" />
<text  x="694.97" y="2031.5" ></text>
</g>
<g >
<title>at::detail::computeStorageSize@plt (2 samples, 0.01%)</title><rect x="642.2" y="1973" width="0.2" height="15.0" fill="rgb(231,147,47)" rx="2" ry="2" />
<text  x="645.24" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1701" width="0.5" height="15.0" fill="rgb(244,69,37)" rx="2" ry="2" />
<text  x="472.55" y="1711.5" ></text>
</g>
<g >
<title>TSlinkClustering::Cluster (2,737 samples, 20.06%)</title><rect x="219.5" y="1989" width="236.7" height="15.0" fill="rgb(250,202,41)" rx="2" ry="2" />
<text  x="222.54" y="1999.5" >TSlinkClustering::Cluster</text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (9 samples, 0.07%)</title><rect x="1185.6" y="1941" width="0.8" height="15.0" fill="rgb(248,14,33)" rx="2" ry="2" />
<text  x="1188.59" y="1951.5" ></text>
</g>
<g >
<title>TAnnotator::AnnotateAll (188 samples, 1.38%)</title><rect x="183.6" y="2005" width="16.2" height="15.0" fill="rgb(225,144,13)" rx="2" ry="2" />
<text  x="186.56" y="2015.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (4 samples, 0.03%)</title><rect x="646.7" y="2005" width="0.4" height="15.0" fill="rgb(210,213,51)" rx="2" ry="2" />
<text  x="649.74" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="197" width="5.5" height="15.0" fill="rgb(218,8,42)" rx="2" ry="2" />
<text  x="67.31" y="207.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="917" width="5.5" height="15.0" fill="rgb(213,137,36)" rx="2" ry="2" />
<text  x="67.31" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="218.7" y="1221" width="0.2" height="15.0" fill="rgb(229,148,45)" rx="2" ry="2" />
<text  x="221.67" y="1231.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (8 samples, 0.06%)</title><rect x="492.5" y="1909" width="0.7" height="15.0" fill="rgb(230,225,11)" rx="2" ry="2" />
<text  x="495.46" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1509" width="0.5" height="15.0" fill="rgb(223,32,29)" rx="2" ry="2" />
<text  x="472.55" y="1519.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLabel[abi:cxx11] (2 samples, 0.01%)</title><rect x="50.0" y="2005" width="0.1" height="15.0" fill="rgb(250,140,24)" rx="2" ry="2" />
<text  x="52.95" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="165" width="5.5" height="15.0" fill="rgb(218,182,21)" rx="2" ry="2" />
<text  x="67.31" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1733" width="0.5" height="15.0" fill="rgb(243,84,20)" rx="2" ry="2" />
<text  x="472.55" y="1743.5" ></text>
</g>
<g >
<title>operator new@plt (2 samples, 0.01%)</title><rect x="692.9" y="2021" width="0.2" height="15.0" fill="rgb(238,112,32)" rx="2" ry="2" />
<text  x="695.92" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1179.8" y="1941" width="0.5" height="15.0" fill="rgb(229,152,27)" rx="2" ry="2" />
<text  x="1182.80" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="357" width="0.1" height="15.0" fill="rgb(249,76,43)" rx="2" ry="2" />
<text  x="1183.57" y="367.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (73 samples, 0.53%)</title><rect x="192.5" y="1925" width="6.3" height="15.0" fill="rgb(214,184,43)" rx="2" ry="2" />
<text  x="195.47" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1717" width="0.5" height="15.0" fill="rgb(246,201,10)" rx="2" ry="2" />
<text  x="472.55" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1541" width="0.3" height="15.0" fill="rgb(237,124,42)" rx="2" ry="2" />
<text  x="221.59" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="997" width="5.5" height="15.0" fill="rgb(206,59,31)" rx="2" ry="2" />
<text  x="67.31" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1637" width="0.3" height="15.0" fill="rgb(250,26,40)" rx="2" ry="2" />
<text  x="1182.97" y="1647.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (4 samples, 0.03%)</title><rect x="49.8" y="2021" width="0.3" height="15.0" fill="rgb(206,54,31)" rx="2" ry="2" />
<text  x="52.78" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1445" width="0.3" height="15.0" fill="rgb(224,55,29)" rx="2" ry="2" />
<text  x="221.59" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="1109" width="0.1" height="15.0" fill="rgb(236,119,2)" rx="2" ry="2" />
<text  x="221.67" y="1119.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::type_to_char (2 samples, 0.01%)</title><rect x="1016.5" y="2053" width="0.2" height="15.0" fill="rgb(242,101,47)" rx="2" ry="2" />
<text  x="1019.52" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1493" width="0.5" height="15.0" fill="rgb(216,57,6)" rx="2" ry="2" />
<text  x="472.55" y="1503.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (203 samples, 1.49%)</title><rect x="654.1" y="2037" width="17.5" height="15.0" fill="rgb(217,173,3)" rx="2" ry="2" />
<text  x="657.09" y="2047.5" ></text>
</g>
<g >
<title>kmp_flag_64::wait (177 samples, 1.30%)</title><rect x="989.7" y="2053" width="15.3" height="15.0" fill="rgb(226,168,22)" rx="2" ry="2" />
<text  x="992.72" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1179.9" y="1893" width="0.4" height="15.0" fill="rgb(212,9,51)" rx="2" ry="2" />
<text  x="1182.88" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="309" width="0.1" height="15.0" fill="rgb(217,187,27)" rx="2" ry="2" />
<text  x="1183.57" y="319.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable_differentiable_view (3 samples, 0.02%)</title><rect x="643.6" y="1989" width="0.3" height="15.0" fill="rgb(220,163,10)" rx="2" ry="2" />
<text  x="646.63" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="405" width="5.5" height="15.0" fill="rgb(214,97,11)" rx="2" ry="2" />
<text  x="67.31" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.06%)</title><rect x="468.9" y="1749" width="0.6" height="15.0" fill="rgb(241,139,29)" rx="2" ry="2" />
<text  x="471.86" y="1759.5" ></text>
</g>
<g >
<title>c10::IValue::type (8 samples, 0.06%)</title><rect x="1183.8" y="1957" width="0.7" height="15.0" fill="rgb(222,225,17)" rx="2" ry="2" />
<text  x="1186.77" y="1967.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (17 samples, 0.12%)</title><rect x="470.8" y="1941" width="1.4" height="15.0" fill="rgb(232,169,18)" rx="2" ry="2" />
<text  x="473.76" y="1951.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (427 samples, 3.13%)</title><rect x="10.3" y="2053" width="37.0" height="15.0" fill="rgb(216,40,19)" rx="2" ry="2" />
<text  x="13.35" y="2063.5" >[li..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1077" width="0.3" height="15.0" fill="rgb(225,21,48)" rx="2" ry="2" />
<text  x="472.55" y="1087.5" ></text>
</g>
<g >
<title>cfree (6 samples, 0.04%)</title><rect x="494.4" y="1941" width="0.5" height="15.0" fill="rgb(238,36,29)" rx="2" ry="2" />
<text  x="497.37" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1749" width="0.3" height="15.0" fill="rgb(225,178,44)" rx="2" ry="2" />
<text  x="221.59" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="469.2" y="1429" width="0.3" height="15.0" fill="rgb(247,93,51)" rx="2" ry="2" />
<text  x="472.20" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1765" width="0.3" height="15.0" fill="rgb(212,12,15)" rx="2" ry="2" />
<text  x="1182.97" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1813" width="0.3" height="15.0" fill="rgb(222,65,1)" rx="2" ry="2" />
<text  x="1183.40" y="1823.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;long  (2 samples, 0.01%)</title><rect x="65.3" y="37" width="0.1" height="15.0" fill="rgb(210,22,13)" rx="2" ry="2" />
<text  x="68.26" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1179.7" y="2037" width="0.6" height="15.0" fill="rgb(253,199,45)" rx="2" ry="2" />
<text  x="1182.71" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (28 samples, 0.21%)</title><rect x="133.8" y="2021" width="2.4" height="15.0" fill="rgb(225,124,10)" rx="2" ry="2" />
<text  x="136.75" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="565" width="0.2" height="15.0" fill="rgb(207,188,51)" rx="2" ry="2" />
<text  x="472.63" y="575.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (9 samples, 0.07%)</title><rect x="68.4" y="53" width="0.8" height="15.0" fill="rgb(214,214,4)" rx="2" ry="2" />
<text  x="71.37" y="63.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="805" width="5.5" height="15.0" fill="rgb(245,119,30)" rx="2" ry="2" />
<text  x="67.31" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="693" width="0.2" height="15.0" fill="rgb(239,38,5)" rx="2" ry="2" />
<text  x="472.63" y="703.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::initNgrams (3 samples, 0.02%)</title><rect x="813.0" y="2053" width="0.2" height="15.0" fill="rgb(254,41,23)" rx="2" ry="2" />
<text  x="815.95" y="2063.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (2 samples, 0.01%)</title><rect x="489.8" y="1829" width="0.2" height="15.0" fill="rgb(212,210,54)" rx="2" ry="2" />
<text  x="492.78" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="469.5" y="1157" width="0.3" height="15.0" fill="rgb(253,97,34)" rx="2" ry="2" />
<text  x="472.55" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="213" width="5.5" height="15.0" fill="rgb(249,1,28)" rx="2" ry="2" />
<text  x="67.31" y="223.5" ></text>
</g>
<g >
<title>c10::TensorImpl::copy_tensor_metadata (2 samples, 0.01%)</title><rect x="644.8" y="2005" width="0.1" height="15.0" fill="rgb(252,223,14)" rx="2" ry="2" />
<text  x="647.75" y="2015.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (11 samples, 0.08%)</title><rect x="766.3" y="2053" width="0.9" height="15.0" fill="rgb(232,162,43)" rx="2" ry="2" />
<text  x="769.26" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1701" width="0.3" height="15.0" fill="rgb(235,29,16)" rx="2" ry="2" />
<text  x="1182.97" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1477" width="0.5" height="15.0" fill="rgb(225,57,34)" rx="2" ry="2" />
<text  x="472.55" y="1487.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.05%)</title><rect x="60.5" y="2005" width="0.6" height="15.0" fill="rgb(244,167,53)" rx="2" ry="2" />
<text  x="63.50" y="2015.5" ></text>
</g>
<g >
<title>at::detail::CPUGuardImpl::getDevice (2 samples, 0.01%)</title><rect x="493.2" y="1909" width="0.1" height="15.0" fill="rgb(226,188,17)" rx="2" ry="2" />
<text  x="496.16" y="1919.5" ></text>
</g>
<g >
<title>std::__find_if&lt;std::pair&lt;tg::ECategory, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, __gnu_cxx::__ops::_Iter_pred&lt;void tg::from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="467.2" y="1925" width="0.2" height="15.0" fill="rgb(247,20,26)" rx="2" ry="2" />
<text  x="470.21" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1509" width="0.2" height="15.0" fill="rgb(211,19,42)" rx="2" ry="2" />
<text  x="1183.49" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="613" width="0.1" height="15.0" fill="rgb(219,187,17)" rx="2" ry="2" />
<text  x="1183.57" y="623.5" ></text>
</g>
<g >
<title>std::istream::read (4 samples, 0.03%)</title><rect x="1182.6" y="2053" width="0.4" height="15.0" fill="rgb(221,8,4)" rx="2" ry="2" />
<text  x="1185.65" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1365" width="0.5" height="15.0" fill="rgb(232,201,5)" rx="2" ry="2" />
<text  x="472.55" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="901" width="5.5" height="15.0" fill="rgb(212,147,38)" rx="2" ry="2" />
<text  x="67.31" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="853" width="0.1" height="15.0" fill="rgb(214,108,32)" rx="2" ry="2" />
<text  x="221.67" y="863.5" ></text>
</g>
<g >
<title>at::empty (3 samples, 0.02%)</title><rect x="757.0" y="2021" width="0.3" height="15.0" fill="rgb(240,16,43)" rx="2" ry="2" />
<text  x="760.00" y="2031.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::GetCountryShare (22 samples, 0.16%)</title><rect x="200.9" y="1941" width="1.9" height="15.0" fill="rgb(210,46,3)" rx="2" ry="2" />
<text  x="203.94" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="645" width="0.1" height="15.0" fill="rgb(214,165,36)" rx="2" ry="2" />
<text  x="1183.57" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="341" width="0.2" height="15.0" fill="rgb(221,169,28)" rx="2" ry="2" />
<text  x="1183.05" y="351.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (12 samples, 0.09%)</title><rect x="623.7" y="1941" width="1.1" height="15.0" fill="rgb(227,85,9)" rx="2" ry="2" />
<text  x="626.74" y="1951.5" ></text>
</g>
<g >
<title>__kmp_invoke_task_func (514 samples, 3.77%)</title><rect x="138.5" y="2037" width="44.5" height="15.0" fill="rgb(248,53,6)" rx="2" ry="2" />
<text  x="141.51" y="2047.5" >__km..</text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="309" width="5.5" height="15.0" fill="rgb(233,122,50)" rx="2" ry="2" />
<text  x="67.31" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1477" width="0.2" height="15.0" fill="rgb(244,137,6)" rx="2" ry="2" />
<text  x="1183.49" y="1487.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (130 samples, 0.95%)</title><rect x="1151.2" y="2053" width="11.2" height="15.0" fill="rgb(215,20,26)" rx="2" ry="2" />
<text  x="1154.17" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (25 samples, 0.18%)</title><rect x="1177.4" y="2053" width="2.1" height="15.0" fill="rgb(217,125,14)" rx="2" ry="2" />
<text  x="1180.37" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15 samples, 0.11%)</title><rect x="468.7" y="1877" width="1.3" height="15.0" fill="rgb(209,179,44)" rx="2" ry="2" />
<text  x="471.68" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1797" width="0.4" height="15.0" fill="rgb(219,123,46)" rx="2" ry="2" />
<text  x="221.50" y="1807.5" ></text>
</g>
<g >
<title>at::TensorIterator::mark_outputs (2 samples, 0.01%)</title><rect x="68.8" y="37" width="0.2" height="15.0" fill="rgb(251,147,3)" rx="2" ry="2" />
<text  x="71.81" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1029" width="0.3" height="15.0" fill="rgb(250,64,0)" rx="2" ry="2" />
<text  x="1182.97" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="389" width="5.5" height="15.0" fill="rgb(207,142,37)" rx="2" ry="2" />
<text  x="67.31" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.1" y="1525" width="0.4" height="15.0" fill="rgb(239,11,29)" rx="2" ry="2" />
<text  x="472.11" y="1535.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;TThreadPool::TThreadPool (8 samples, 0.06%)</title><rect x="50.5" y="2037" width="0.7" height="15.0" fill="rgb(205,7,49)" rx="2" ry="2" />
<text  x="53.47" y="2047.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.07%)</title><rect x="729.1" y="2037" width="0.7" height="15.0" fill="rgb(206,126,13)" rx="2" ry="2" />
<text  x="732.07" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="757" width="0.2" height="15.0" fill="rgb(234,176,44)" rx="2" ry="2" />
<text  x="1183.49" y="767.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1701" width="5.6" height="15.0" fill="rgb(220,137,30)" rx="2" ry="2" />
<text  x="67.31" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="469.2" y="1493" width="0.3" height="15.0" fill="rgb(242,7,46)" rx="2" ry="2" />
<text  x="472.20" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1173" width="0.3" height="15.0" fill="rgb(227,227,27)" rx="2" ry="2" />
<text  x="472.55" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="725" width="0.2" height="15.0" fill="rgb(240,129,33)" rx="2" ry="2" />
<text  x="1183.05" y="735.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="565" width="5.5" height="15.0" fill="rgb(206,186,25)" rx="2" ry="2" />
<text  x="67.31" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.1" y="53" width="0.2" height="15.0" fill="rgb(219,214,45)" rx="2" ry="2" />
<text  x="1183.14" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="869" width="0.2" height="15.0" fill="rgb(240,57,15)" rx="2" ry="2" />
<text  x="472.63" y="879.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (402 samples, 2.95%)</title><rect x="1017.8" y="2053" width="34.8" height="15.0" fill="rgb(243,30,50)" rx="2" ry="2" />
<text  x="1020.82" y="2063.5" >on..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1125" width="0.3" height="15.0" fill="rgb(236,201,37)" rx="2" ry="2" />
<text  x="1182.97" y="1135.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (2 samples, 0.01%)</title><rect x="490.9" y="1877" width="0.2" height="15.0" fill="rgb(219,194,38)" rx="2" ry="2" />
<text  x="493.91" y="1887.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::future&lt;std::result_of&lt;std::optional&lt;TDbDocument&gt;  (2 samples, 0.01%)</title><rect x="50.6" y="2021" width="0.2" height="15.0" fill="rgb(231,207,16)" rx="2" ry="2" />
<text  x="53.64" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="389" width="0.1" height="15.0" fill="rgb(211,159,12)" rx="2" ry="2" />
<text  x="1183.57" y="399.5" ></text>
</g>
<g >
<title>torch::from_blob (19 samples, 0.14%)</title><rect x="488.7" y="1925" width="1.6" height="15.0" fill="rgb(249,84,37)" rx="2" ry="2" />
<text  x="491.66" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (53 samples, 0.39%)</title><rect x="736.2" y="2021" width="4.5" height="15.0" fill="rgb(254,143,12)" rx="2" ry="2" />
<text  x="739.16" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1845" width="5.6" height="15.0" fill="rgb(234,202,11)" rx="2" ry="2" />
<text  x="67.31" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1093" width="0.3" height="15.0" fill="rgb(230,54,41)" rx="2" ry="2" />
<text  x="1182.97" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="165" width="0.1" height="15.0" fill="rgb(239,11,46)" rx="2" ry="2" />
<text  x="1183.57" y="175.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (3 samples, 0.02%)</title><rect x="756.1" y="2005" width="0.3" height="15.0" fill="rgb(251,37,14)" rx="2" ry="2" />
<text  x="759.14" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1429" width="0.2" height="15.0" fill="rgb(249,33,49)" rx="2" ry="2" />
<text  x="1183.49" y="1439.5" ></text>
</g>
<g >
<title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::reset_ (4 samples, 0.03%)</title><rect x="648.0" y="2005" width="0.4" height="15.0" fill="rgb(224,116,43)" rx="2" ry="2" />
<text  x="651.04" y="2015.5" ></text>
</g>
<g >
<title>mkl_blas_xsgemv (18 samples, 0.13%)</title><rect x="675.2" y="2037" width="1.5" height="15.0" fill="rgb(252,64,15)" rx="2" ry="2" />
<text  x="678.19" y="2047.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="137.3" y="2021" width="0.2" height="15.0" fill="rgb(206,87,29)" rx="2" ry="2" />
<text  x="140.30" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1077" width="0.3" height="15.0" fill="rgb(208,45,35)" rx="2" ry="2" />
<text  x="1182.97" y="1087.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (4 samples, 0.03%)</title><rect x="641.6" y="1989" width="0.4" height="15.0" fill="rgb(223,203,2)" rx="2" ry="2" />
<text  x="644.64" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="837" width="0.2" height="15.0" fill="rgb(227,16,31)" rx="2" ry="2" />
<text  x="472.63" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="218.6" y="1637" width="0.3" height="15.0" fill="rgb(231,5,46)" rx="2" ry="2" />
<text  x="221.59" y="1647.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (2 samples, 0.01%)</title><rect x="49.8" y="2005" width="0.2" height="15.0" fill="rgb(228,13,35)" rx="2" ry="2" />
<text  x="52.78" y="2015.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.05%)</title><rect x="491.9" y="1941" width="0.6" height="15.0" fill="rgb(221,24,17)" rx="2" ry="2" />
<text  x="494.86" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="869" width="0.2" height="15.0" fill="rgb(215,101,47)" rx="2" ry="2" />
<text  x="1183.05" y="879.5" ></text>
</g>
<g >
<title>TDocument::TDocument (2 samples, 0.01%)</title><rect x="184.2" y="1973" width="0.1" height="15.0" fill="rgb(229,117,43)" rx="2" ry="2" />
<text  x="187.17" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1477" width="0.3" height="15.0" fill="rgb(217,5,52)" rx="2" ry="2" />
<text  x="1182.97" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="725" width="0.2" height="15.0" fill="rgb(213,217,47)" rx="2" ry="2" />
<text  x="472.63" y="735.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (10 samples, 0.07%)</title><rect x="61.7" y="1957" width="0.9" height="15.0" fill="rgb(216,200,3)" rx="2" ry="2" />
<text  x="64.71" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1621" width="0.3" height="15.0" fill="rgb(244,10,40)" rx="2" ry="2" />
<text  x="221.59" y="1631.5" ></text>
</g>
<g >
<title>c10::UndefinedTensorImpl::~UndefinedTensorImpl (14 samples, 0.10%)</title><rect x="647.2" y="2037" width="1.2" height="15.0" fill="rgb(227,202,51)" rx="2" ry="2" />
<text  x="650.17" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1180.3" y="1973" width="0.4" height="15.0" fill="rgb(206,221,41)" rx="2" ry="2" />
<text  x="1183.31" y="1983.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_set_ (4 samples, 0.03%)</title><rect x="489.4" y="1781" width="0.3" height="15.0" fill="rgb(247,130,48)" rx="2" ry="2" />
<text  x="492.35" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="501" width="0.2" height="15.0" fill="rgb(208,146,54)" rx="2" ry="2" />
<text  x="1183.05" y="511.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (186 samples, 1.36%)</title><rect x="200.3" y="1957" width="16.1" height="15.0" fill="rgb(209,69,44)" rx="2" ry="2" />
<text  x="203.34" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1413" width="0.2" height="15.0" fill="rgb(251,170,6)" rx="2" ry="2" />
<text  x="1183.49" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1829" width="0.3" height="15.0" fill="rgb(243,147,33)" rx="2" ry="2" />
<text  x="1182.97" y="1839.5" ></text>
</g>
<g >
<title>std::packaged_task&lt;std::optional&lt;TDbDocument&gt;  (2 samples, 0.01%)</title><rect x="50.6" y="2005" width="0.2" height="15.0" fill="rgb(243,5,44)" rx="2" ry="2" />
<text  x="53.64" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1397" width="0.2" height="15.0" fill="rgb(229,192,35)" rx="2" ry="2" />
<text  x="1183.49" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1957" width="0.3" height="15.0" fill="rgb(253,51,10)" rx="2" ry="2" />
<text  x="1183.40" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (2 samples, 0.01%)</title><rect x="136.6" y="2021" width="0.2" height="15.0" fill="rgb(206,218,29)" rx="2" ry="2" />
<text  x="139.60" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.10%)</title><rect x="647.2" y="2021" width="1.2" height="15.0" fill="rgb(215,80,36)" rx="2" ry="2" />
<text  x="650.17" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="805" width="0.2" height="15.0" fill="rgb(215,142,1)" rx="2" ry="2" />
<text  x="1183.05" y="815.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1237" width="5.5" height="15.0" fill="rgb(214,153,53)" rx="2" ry="2" />
<text  x="67.31" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1077" width="5.5" height="15.0" fill="rgb(236,162,2)" rx="2" ry="2" />
<text  x="67.31" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1093" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="67.31" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="740.7" y="2021" width="0.2" height="15.0" fill="rgb(254,158,21)" rx="2" ry="2" />
<text  x="743.74" y="2031.5" ></text>
</g>
<g >
<title>DetectCategory (14 samples, 0.10%)</title><rect x="466.2" y="1957" width="1.2" height="15.0" fill="rgb(212,78,16)" rx="2" ry="2" />
<text  x="469.17" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="693" width="0.2" height="15.0" fill="rgb(215,99,14)" rx="2" ry="2" />
<text  x="1183.49" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.5" y="1525" width="0.5" height="15.0" fill="rgb(218,6,12)" rx="2" ry="2" />
<text  x="472.55" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1413" width="0.5" height="15.0" fill="rgb(249,121,20)" rx="2" ry="2" />
<text  x="472.55" y="1423.5" ></text>
</g>
<g >
<title>TNewsCluster::SortByWeights (6 samples, 0.04%)</title><rect x="219.0" y="1973" width="0.5" height="15.0" fill="rgb(232,181,49)" rx="2" ry="2" />
<text  x="222.02" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1180.3" y="1989" width="0.4" height="15.0" fill="rgb(222,137,40)" rx="2" ry="2" />
<text  x="1183.31" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1180.6" y="229" width="0.1" height="15.0" fill="rgb(207,49,45)" rx="2" ry="2" />
<text  x="1183.57" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="949" width="0.1" height="15.0" fill="rgb(252,211,52)" rx="2" ry="2" />
<text  x="221.67" y="959.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1477" width="5.5" height="15.0" fill="rgb(246,124,15)" rx="2" ry="2" />
<text  x="67.31" y="1487.5" ></text>
</g>
<g >
<title>__kmp_invoke_microtask (514 samples, 3.77%)</title><rect x="138.5" y="2021" width="44.5" height="15.0" fill="rgb(239,11,33)" rx="2" ry="2" />
<text  x="141.51" y="2031.5" >__km..</text>
</g>
<g >
<title>__libc_start_main (3,263 samples, 23.91%)</title><rect x="183.0" y="2037" width="282.1" height="15.0" fill="rgb(217,88,46)" rx="2" ry="2" />
<text  x="185.96" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>std::vector&lt;fasttext::entry, std::allocator&lt;fasttext::entry&gt; &gt;::_M_realloc_insert&lt;fasttext::entry const&amp;&gt; (5 samples, 0.04%)</title><rect x="137.7" y="2021" width="0.5" height="15.0" fill="rgb(207,225,13)" rx="2" ry="2" />
<text  x="140.73" y="2031.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable (2 samples, 0.01%)</title><rect x="490.1" y="1909" width="0.2" height="15.0" fill="rgb(225,56,28)" rx="2" ry="2" />
<text  x="493.13" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="293" width="5.5" height="15.0" fill="rgb(228,81,53)" rx="2" ry="2" />
<text  x="67.31" y="303.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (67 samples, 0.49%)</title><rect x="845.2" y="2053" width="5.8" height="15.0" fill="rgb(221,103,6)" rx="2" ry="2" />
<text  x="848.21" y="2063.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="133.4" y="2021" width="0.2" height="15.0" fill="rgb(229,17,6)" rx="2" ry="2" />
<text  x="136.40" y="2031.5" ></text>
</g>
<g >
<title>TNewsCluster::~TNewsCluster (4 samples, 0.03%)</title><rect x="457.9" y="2005" width="0.3" height="15.0" fill="rgb(227,140,40)" rx="2" ry="2" />
<text  x="460.87" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1781" width="0.3" height="15.0" fill="rgb(248,142,48)" rx="2" ry="2" />
<text  x="1183.40" y="1791.5" ></text>
</g>
<g >
<title>malloc (33 samples, 0.24%)</title><rect x="671.8" y="2037" width="2.9" height="15.0" fill="rgb(244,229,40)" rx="2" ry="2" />
<text  x="674.82" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="549" width="5.5" height="15.0" fill="rgb(230,21,48)" rx="2" ry="2" />
<text  x="67.31" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="464.9" y="1941" width="0.2" height="15.0" fill="rgb(211,143,53)" rx="2" ry="2" />
<text  x="467.88" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::operator[]&lt;char const&gt; (6 samples, 0.04%)</title><rect x="463.4" y="2005" width="0.5" height="15.0" fill="rgb(244,165,2)" rx="2" ry="2" />
<text  x="466.41" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="1205" width="5.5" height="15.0" fill="rgb(221,30,48)" rx="2" ry="2" />
<text  x="67.31" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1573" width="0.3" height="15.0" fill="rgb(235,48,20)" rx="2" ry="2" />
<text  x="1183.40" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1429" width="0.3" height="15.0" fill="rgb(248,101,13)" rx="2" ry="2" />
<text  x="1182.97" y="1439.5" ></text>
</g>
<g >
<title>c10::impl::tls_local_dispatch_key_set (3 samples, 0.02%)</title><rect x="755.8" y="2053" width="0.3" height="15.0" fill="rgb(245,202,47)" rx="2" ry="2" />
<text  x="758.79" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="901" width="0.2" height="15.0" fill="rgb(232,147,42)" rx="2" ry="2" />
<text  x="472.63" y="911.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1717" width="5.6" height="15.0" fill="rgb(247,194,2)" rx="2" ry="2" />
<text  x="67.31" y="1727.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (2 samples, 0.01%)</title><rect x="76.1" y="2005" width="0.1" height="15.0" fill="rgb(252,189,35)" rx="2" ry="2" />
<text  x="79.07" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="641.5" y="2021" width="5.6" height="15.0" fill="rgb(246,59,53)" rx="2" ry="2" />
<text  x="644.47" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1493" width="0.3" height="15.0" fill="rgb(221,201,53)" rx="2" ry="2" />
<text  x="1182.97" y="1503.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.04%)</title><rect x="203.2" y="1925" width="0.4" height="15.0" fill="rgb(207,61,38)" rx="2" ry="2" />
<text  x="206.19" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="805" width="0.2" height="15.0" fill="rgb(237,147,39)" rx="2" ry="2" />
<text  x="1183.49" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="773" width="0.2" height="15.0" fill="rgb(227,166,53)" rx="2" ry="2" />
<text  x="1183.05" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="501" width="0.1" height="15.0" fill="rgb(230,100,33)" rx="2" ry="2" />
<text  x="1183.57" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (4 samples, 0.03%)</title><rect x="211.8" y="1925" width="0.4" height="15.0" fill="rgb(220,147,48)" rx="2" ry="2" />
<text  x="214.84" y="1935.5" ></text>
</g>
<g >
<title>TDbDocument::operator= (4 samples, 0.03%)</title><rect x="456.7" y="1941" width="0.4" height="15.0" fill="rgb(240,115,29)" rx="2" ry="2" />
<text  x="459.75" y="1951.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (58 samples, 0.43%)</title><rect x="1054.8" y="2053" width="5.0" height="15.0" fill="rgb(234,205,16)" rx="2" ry="2" />
<text  x="1057.83" y="2063.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="463.4" y="1989" width="0.3" height="15.0" fill="rgb(223,130,6)" rx="2" ry="2" />
<text  x="466.41" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (2 samples, 0.01%)</title><rect x="651.4" y="2037" width="0.2" height="15.0" fill="rgb(236,0,48)" rx="2" ry="2" />
<text  x="654.41" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1893" width="0.3" height="15.0" fill="rgb(213,5,52)" rx="2" ry="2" />
<text  x="1183.40" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="917" width="0.2" height="15.0" fill="rgb(241,50,1)" rx="2" ry="2" />
<text  x="1183.05" y="927.5" ></text>
</g>
<g >
<title>at::native::resize_ (2 samples, 0.01%)</title><rect x="67.3" y="37" width="0.2" height="15.0" fill="rgb(251,73,45)" rx="2" ry="2" />
<text  x="70.34" y="47.5" ></text>
</g>
<g >
<title>at::Tensor::is_view (5 samples, 0.04%)</title><rect x="485.3" y="1877" width="0.4" height="15.0" fill="rgb(212,125,7)" rx="2" ry="2" />
<text  x="488.29" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1269" width="0.3" height="15.0" fill="rgb(248,129,33)" rx="2" ry="2" />
<text  x="1182.97" y="1279.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (3 samples, 0.02%)</title><rect x="491.5" y="1893" width="0.3" height="15.0" fill="rgb(234,181,51)" rx="2" ry="2" />
<text  x="494.51" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1301" width="0.3" height="15.0" fill="rgb(230,154,11)" rx="2" ry="2" />
<text  x="1182.97" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1180.3" y="2053" width="0.4" height="15.0" fill="rgb(221,91,27)" rx="2" ry="2" />
<text  x="1183.31" y="2063.5" ></text>
</g>
<g >
<title>__kmp_hardware_timestamp (65 samples, 0.48%)</title><rect x="745.8" y="2053" width="5.6" height="15.0" fill="rgb(251,144,11)" rx="2" ry="2" />
<text  x="748.76" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="549" width="0.2" height="15.0" fill="rgb(251,1,12)" rx="2" ry="2" />
<text  x="1183.05" y="559.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::at (3 samples, 0.02%)</title><rect x="464.6" y="2005" width="0.3" height="15.0" fill="rgb(213,7,37)" rx="2" ry="2" />
<text  x="467.62" y="2015.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (4 samples, 0.03%)</title><rect x="74.1" y="2005" width="0.3" height="15.0" fill="rgb(240,154,20)" rx="2" ry="2" />
<text  x="77.08" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getId (107 samples, 0.78%)</title><rect x="778.4" y="2053" width="9.2" height="15.0" fill="rgb(210,14,14)" rx="2" ry="2" />
<text  x="781.36" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1045" width="0.2" height="15.0" fill="rgb(220,185,22)" rx="2" ry="2" />
<text  x="1183.49" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1109" width="0.2" height="15.0" fill="rgb(212,99,49)" rx="2" ry="2" />
<text  x="1183.49" y="1119.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_column_family.cc (8 samples, 0.06%)</title><rect x="744.2" y="2053" width="0.7" height="15.0" fill="rgb(232,185,6)" rx="2" ry="2" />
<text  x="747.20" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="357" width="5.5" height="15.0" fill="rgb(234,134,10)" rx="2" ry="2" />
<text  x="67.31" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1237" width="0.3" height="15.0" fill="rgb(242,181,40)" rx="2" ry="2" />
<text  x="472.55" y="1247.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (10 samples, 0.07%)</title><rect x="489.1" y="1861" width="0.9" height="15.0" fill="rgb(249,18,22)" rx="2" ry="2" />
<text  x="492.09" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1179.5" y="1973" width="0.2" height="15.0" fill="rgb(208,136,27)" rx="2" ry="2" />
<text  x="1182.54" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="469.5" y="1205" width="0.3" height="15.0" fill="rgb(213,118,13)" rx="2" ry="2" />
<text  x="472.55" y="1215.5" ></text>
</g>
<g >
<title>cfree (11 samples, 0.08%)</title><rect x="77.1" y="2021" width="1.0" height="15.0" fill="rgb(231,50,2)" rx="2" ry="2" />
<text  x="80.11" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="901" width="0.2" height="15.0" fill="rgb(243,61,10)" rx="2" ry="2" />
<text  x="1183.05" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="677" width="0.2" height="15.0" fill="rgb(233,176,10)" rx="2" ry="2" />
<text  x="1183.05" y="687.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (7 samples, 0.05%)</title><rect x="489.2" y="1829" width="0.6" height="15.0" fill="rgb(213,85,16)" rx="2" ry="2" />
<text  x="492.18" y="1839.5" ></text>
</g>
<g >
<title>rocksdb::CompactionIterator::CompactionIterator (3 samples, 0.02%)</title><rect x="1150.1" y="2053" width="0.3" height="15.0" fill="rgb(220,91,19)" rx="2" ry="2" />
<text  x="1153.13" y="2063.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (15 samples, 0.11%)</title><rect x="1014.6" y="2053" width="1.3" height="15.0" fill="rgb(227,119,7)" rx="2" ry="2" />
<text  x="1017.62" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.4" y="1861" width="0.3" height="15.0" fill="rgb(248,172,36)" rx="2" ry="2" />
<text  x="1183.40" y="1871.5" ></text>
</g>
<g >
<title>at::infer_size (2 samples, 0.01%)</title><rect x="71.3" y="1957" width="0.2" height="15.0" fill="rgb(213,87,46)" rx="2" ry="2" />
<text  x="74.31" y="1967.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (12 samples, 0.09%)</title><rect x="488.9" y="1877" width="1.1" height="15.0" fill="rgb(220,121,3)" rx="2" ry="2" />
<text  x="491.92" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1179.8" y="1925" width="0.5" height="15.0" fill="rgb(224,169,7)" rx="2" ry="2" />
<text  x="1182.80" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="1045" width="0.1" height="15.0" fill="rgb(206,24,41)" rx="2" ry="2" />
<text  x="221.67" y="1055.5" ></text>
</g>
<g >
<title>c10::TensorOptions::merge_in (2 samples, 0.01%)</title><rect x="754.7" y="2053" width="0.1" height="15.0" fill="rgb(205,145,23)" rx="2" ry="2" />
<text  x="757.67" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (3 samples, 0.02%)</title><rect x="461.2" y="1925" width="0.3" height="15.0" fill="rgb(246,17,52)" rx="2" ry="2" />
<text  x="464.25" y="1935.5" ></text>
</g>
<g >
<title>RunFasttextClf (2 samples, 0.01%)</title><rect x="467.8" y="1941" width="0.2" height="15.0" fill="rgb(216,64,18)" rx="2" ry="2" />
<text  x="470.82" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (4 samples, 0.03%)</title><rect x="99.6" y="2021" width="0.3" height="15.0" fill="rgb(222,149,40)" rx="2" ry="2" />
<text  x="102.59" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="469.6" y="453" width="0.2" height="15.0" fill="rgb(246,152,45)" rx="2" ry="2" />
<text  x="472.63" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="1157" width="0.1" height="15.0" fill="rgb(213,142,40)" rx="2" ry="2" />
<text  x="221.67" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1845" width="0.3" height="15.0" fill="rgb(218,206,8)" rx="2" ry="2" />
<text  x="1182.97" y="1855.5" ></text>
</g>
<g >
<title>TNewsCluster::AddDocument (2 samples, 0.01%)</title><rect x="219.5" y="1973" width="0.2" height="15.0" fill="rgb(206,56,46)" rx="2" ry="2" />
<text  x="222.54" y="1983.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (363 samples, 2.66%)</title><rect x="101.5" y="2021" width="31.4" height="15.0" fill="rgb(234,69,37)" rx="2" ry="2" />
<text  x="104.49" y="2031.5" >on..</text>
</g>
<g >
<title>std::istream::sentry::sentry (16 samples, 0.12%)</title><rect x="736.3" y="2005" width="1.4" height="15.0" fill="rgb(252,42,19)" rx="2" ry="2" />
<text  x="739.33" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (293 samples, 2.15%)</title><rect x="787.6" y="2053" width="25.4" height="15.0" fill="rgb(235,221,25)" rx="2" ry="2" />
<text  x="790.62" y="2063.5" >f..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.07%)</title><rect x="1179.5" y="2053" width="0.8" height="15.0" fill="rgb(213,35,36)" rx="2" ry="2" />
<text  x="1182.54" y="2063.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (4 samples, 0.03%)</title><rect x="753.2" y="2021" width="0.3" height="15.0" fill="rgb(225,95,30)" rx="2" ry="2" />
<text  x="756.20" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="933" width="5.5" height="15.0" fill="rgb(231,174,16)" rx="2" ry="2" />
<text  x="67.31" y="943.5" ></text>
</g>
<g >
<title>std::istream::get (3 samples, 0.02%)</title><rect x="1182.2" y="2053" width="0.3" height="15.0" fill="rgb(207,100,21)" rx="2" ry="2" />
<text  x="1185.22" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="325" width="0.2" height="15.0" fill="rgb(236,143,53)" rx="2" ry="2" />
<text  x="1183.05" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1461" width="0.3" height="15.0" fill="rgb(253,121,18)" rx="2" ry="2" />
<text  x="221.59" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1445" width="0.3" height="15.0" fill="rgb(233,185,32)" rx="2" ry="2" />
<text  x="1182.97" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="197" width="0.2" height="15.0" fill="rgb(211,94,26)" rx="2" ry="2" />
<text  x="1183.05" y="207.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="469" width="5.5" height="15.0" fill="rgb(217,95,24)" rx="2" ry="2" />
<text  x="67.31" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1509" width="0.3" height="15.0" fill="rgb(216,28,14)" rx="2" ry="2" />
<text  x="1182.97" y="1519.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (28 samples, 0.21%)</title><rect x="57.9" y="2021" width="2.4" height="15.0" fill="rgb(216,221,37)" rx="2" ry="2" />
<text  x="60.91" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="218.6" y="1525" width="0.3" height="15.0" fill="rgb(245,49,53)" rx="2" ry="2" />
<text  x="221.59" y="1535.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::t (5 samples, 0.04%)</title><rect x="743.0" y="1989" width="0.4" height="15.0" fill="rgb(214,198,20)" rx="2" ry="2" />
<text  x="745.99" y="1999.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (19 samples, 0.14%)</title><rect x="93.6" y="2021" width="1.7" height="15.0" fill="rgb(221,136,50)" rx="2" ry="2" />
<text  x="96.62" y="2031.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (23 samples, 0.17%)</title><rect x="484.3" y="1909" width="2.0" height="15.0" fill="rgb(237,17,4)" rx="2" ry="2" />
<text  x="487.33" y="1919.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::construct&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="464.9" y="1989" width="0.2" height="15.0" fill="rgb(247,105,8)" rx="2" ry="2" />
<text  x="467.88" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1893" width="5.6" height="15.0" fill="rgb(218,17,38)" rx="2" ry="2" />
<text  x="67.31" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="485" width="0.2" height="15.0" fill="rgb(225,43,1)" rx="2" ry="2" />
<text  x="1183.05" y="495.5" ></text>
</g>
<g >
<title>TThreadPool::enqueue&lt;std::optional&lt;TDbDocument&gt;  (7 samples, 0.05%)</title><rect x="184.2" y="1989" width="0.6" height="15.0" fill="rgb(223,173,1)" rx="2" ry="2" />
<text  x="187.17" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1381" width="0.2" height="15.0" fill="rgb(211,19,1)" rx="2" ry="2" />
<text  x="1183.49" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="757" width="0.2" height="15.0" fill="rgb(246,203,44)" rx="2" ry="2" />
<text  x="472.63" y="767.5" ></text>
</g>
<g >
<title>c10::TensorImpl::refresh_contiguous (3 samples, 0.02%)</title><rect x="642.5" y="1957" width="0.3" height="15.0" fill="rgb(231,32,23)" rx="2" ry="2" />
<text  x="645.50" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="641.0" y="2021" width="0.3" height="15.0" fill="rgb(246,77,28)" rx="2" ry="2" />
<text  x="644.03" y="2031.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;TDbDocument, double&gt;*, std::vector&lt;std::pair&lt;TDbDocument, double&gt;, std::allocator&lt;std::pair&lt;TDbDocument, double&gt; &gt; &gt; &gt;, std::pair&lt;TDbDocument, double&gt;*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TNewsCluster::SortByWeights (2 samples, 0.01%)</title><rect x="219.4" y="1957" width="0.1" height="15.0" fill="rgb(216,45,8)" rx="2" ry="2" />
<text  x="222.36" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="149" width="0.2" height="15.0" fill="rgb(237,206,12)" rx="2" ry="2" />
<text  x="1183.05" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate@plt (2 samples, 0.01%)</title><rect x="1163.2" y="2053" width="0.2" height="15.0" fill="rgb(216,22,25)" rx="2" ry="2" />
<text  x="1166.19" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.1" y="565" width="0.2" height="15.0" fill="rgb(247,39,8)" rx="2" ry="2" />
<text  x="1183.05" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="1141" width="0.1" height="15.0" fill="rgb(211,176,22)" rx="2" ry="2" />
<text  x="221.67" y="1151.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="464.9" y="1973" width="0.2" height="15.0" fill="rgb(221,27,45)" rx="2" ry="2" />
<text  x="467.88" y="1983.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 8, 4, false, false&gt;::operator (2 samples, 0.01%)</title><rect x="218.2" y="1893" width="0.1" height="15.0" fill="rgb(249,166,47)" rx="2" ry="2" />
<text  x="221.15" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (932 samples, 6.83%)</title><rect x="57.9" y="2037" width="80.6" height="15.0" fill="rgb(254,131,31)" rx="2" ry="2" />
<text  x="60.91" y="2047.5" >[unknown]</text>
</g>
<g >
<title>at::native::empty_cpu (3 samples, 0.02%)</title><rect x="641.6" y="1973" width="0.3" height="15.0" fill="rgb(235,201,8)" rx="2" ry="2" />
<text  x="644.64" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (145 samples, 1.06%)</title><rect x="1163.4" y="2053" width="12.5" height="15.0" fill="rgb(247,118,6)" rx="2" ry="2" />
<text  x="1166.36" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.2" y="1365" width="0.2" height="15.0" fill="rgb(218,30,25)" rx="2" ry="2" />
<text  x="472.20" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.6" y="597" width="0.1" height="15.0" fill="rgb(237,52,43)" rx="2" ry="2" />
<text  x="1183.57" y="607.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (15 samples, 0.11%)</title><rect x="472.8" y="1925" width="1.3" height="15.0" fill="rgb(207,113,13)" rx="2" ry="2" />
<text  x="475.83" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1237" width="0.2" height="15.0" fill="rgb(218,40,6)" rx="2" ry="2" />
<text  x="1183.49" y="1247.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::parse (162 samples, 1.19%)</title><rect x="184.9" y="1973" width="14.0" height="15.0" fill="rgb(226,14,4)" rx="2" ry="2" />
<text  x="187.86" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (4 samples, 0.03%)</title><rect x="740.9" y="2037" width="0.4" height="15.0" fill="rgb(217,135,0)" rx="2" ry="2" />
<text  x="743.92" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1813" width="0.4" height="15.0" fill="rgb(243,55,27)" rx="2" ry="2" />
<text  x="221.50" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="730.5" y="2021" width="0.1" height="15.0" fill="rgb(233,17,9)" rx="2" ry="2" />
<text  x="733.45" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="456.2" y="1989" width="0.2" height="15.0" fill="rgb(230,36,34)" rx="2" ry="2" />
<text  x="459.23" y="1999.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (3 samples, 0.02%)</title><rect x="69.9" y="1941" width="0.3" height="15.0" fill="rgb(239,4,54)" rx="2" ry="2" />
<text  x="72.93" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="218.7" y="997" width="0.1" height="15.0" fill="rgb(238,162,19)" rx="2" ry="2" />
<text  x="221.67" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1180.1" y="101" width="0.2" height="15.0" fill="rgb(209,145,38)" rx="2" ry="2" />
<text  x="1183.14" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="469.5" y="1349" width="0.5" height="15.0" fill="rgb(248,76,48)" rx="2" ry="2" />
<text  x="472.55" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.4" y="1621" width="0.3" height="15.0" fill="rgb(207,215,24)" rx="2" ry="2" />
<text  x="1183.40" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="743.9" y="1973" width="0.2" height="15.0" fill="rgb(244,132,5)" rx="2" ry="2" />
<text  x="746.94" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="218.7" y="1189" width="0.2" height="15.0" fill="rgb(227,96,16)" rx="2" ry="2" />
<text  x="221.67" y="1199.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (3 samples, 0.02%)</title><rect x="492.6" y="1893" width="0.2" height="15.0" fill="rgb(223,118,26)" rx="2" ry="2" />
<text  x="495.55" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.1" y="997" width="0.2" height="15.0" fill="rgb(206,169,2)" rx="2" ry="2" />
<text  x="1183.05" y="1007.5" ></text>
</g>
<g >
<title>c10::KernelFunction::getFunctor_ (2 samples, 0.01%)</title><rect x="757.4" y="2021" width="0.2" height="15.0" fill="rgb(218,191,45)" rx="2" ry="2" />
<text  x="760.43" y="2031.5" ></text>
</g>
<g >
<title>at::LegacyTypeDispatch::initForDispatchKeySet (2 samples, 0.01%)</title><rect x="490.6" y="1893" width="0.1" height="15.0" fill="rgb(236,35,20)" rx="2" ry="2" />
<text  x="493.56" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="469.6" y="885" width="0.2" height="15.0" fill="rgb(234,68,12)" rx="2" ry="2" />
<text  x="472.63" y="895.5" ></text>
</g>
<g >
<title>nlohmann::detail::dtoa_impl::grisu2_digit_gen (3 samples, 0.02%)</title><rect x="1014.4" y="2053" width="0.2" height="15.0" fill="rgb(223,87,24)" rx="2" ry="2" />
<text  x="1017.36" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1180.0" y="1589" width="0.3" height="15.0" fill="rgb(218,14,52)" rx="2" ry="2" />
<text  x="1182.97" y="1599.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.04%)</title><rect x="184.3" y="1973" width="0.5" height="15.0" fill="rgb(213,222,6)" rx="2" ry="2" />
<text  x="187.34" y="1983.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::get_centroids (12 samples, 0.09%)</title><rect x="982.5" y="2053" width="1.0" height="15.0" fill="rgb(216,177,19)" rx="2" ry="2" />
<text  x="985.45" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (4 samples, 0.03%)</title><rect x="478.9" y="1941" width="0.3" height="15.0" fill="rgb(223,217,38)" rx="2" ry="2" />
<text  x="481.89" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1180.0" y="1733" width="0.3" height="15.0" fill="rgb(233,51,28)" rx="2" ry="2" />
<text  x="1182.97" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="218.7" y="1237" width="0.2" height="15.0" fill="rgb(208,26,23)" rx="2" ry="2" />
<text  x="221.67" y="1247.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (7 samples, 0.05%)</title><rect x="1162.4" y="2053" width="0.6" height="15.0" fill="rgb(207,61,37)" rx="2" ry="2" />
<text  x="1165.41" y="2063.5" ></text>
</g>
<g >
<title>torch::jit::Node::~Node (2 samples, 0.01%)</title><rect x="743.9" y="2037" width="0.2" height="15.0" fill="rgb(253,39,51)" rx="2" ry="2" />
<text  x="746.94" y="2047.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (5 samples, 0.04%)</title><rect x="81.1" y="2021" width="0.4" height="15.0" fill="rgb(212,40,53)" rx="2" ry="2" />
<text  x="84.09" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (106 samples, 0.78%)</title><rect x="61.3" y="1989" width="9.1" height="15.0" fill="rgb(237,188,50)" rx="2" ry="2" />
<text  x="64.28" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="1093" width="0.2" height="15.0" fill="rgb(235,206,20)" rx="2" ry="2" />
<text  x="1183.49" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.48%)</title><rect x="64.3" y="1813" width="5.6" height="15.0" fill="rgb(235,76,50)" rx="2" ry="2" />
<text  x="67.31" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="218.7" y="1125" width="0.1" height="15.0" fill="rgb(216,209,54)" rx="2" ry="2" />
<text  x="221.67" y="1135.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (3 samples, 0.02%)</title><rect x="185.6" y="1941" width="0.2" height="15.0" fill="rgb(252,159,35)" rx="2" ry="2" />
<text  x="188.55" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1180.5" y="901" width="0.2" height="15.0" fill="rgb(215,114,54)" rx="2" ry="2" />
<text  x="1183.49" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="218.5" y="1765" width="0.4" height="15.0" fill="rgb(232,54,46)" rx="2" ry="2" />
<text  x="221.50" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1180.5" y="1205" width="0.2" height="15.0" fill="rgb(235,219,27)" rx="2" ry="2" />
<text  x="1183.49" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.47%)</title><rect x="64.3" y="821" width="5.5" height="15.0" fill="rgb(241,125,18)" rx="2" ry="2" />
<text  x="67.31" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="469.1" y="1541" width="0.4" height="15.0" fill="rgb(247,63,11)" rx="2" ry="2" />
<text  x="472.11" y="1551.5" ></text>
</g>
</g>
</svg>
